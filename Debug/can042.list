
can042.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003578  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003638  08003638  00013638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003698  08003698  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003698  08003698  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003698  08003698  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003698  08003698  00013698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800369c  0800369c  0001369c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080036a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000000c  080036ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  080036ac  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000850c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001726  00000000  00000000  00028540  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007c8  00000000  00000000  00029c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000700  00000000  00000000  0002a430  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014b61  00000000  00000000  0002ab30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006a3d  00000000  00000000  0003f691  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072610  00000000  00000000  000460ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b86de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a90  00000000  00000000  000b875c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003620 	.word	0x08003620

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003620 	.word	0x08003620

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fb24 	bl	8000870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f838 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f92e 	bl	800048c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f8fc 	bl	800042c <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000234:	f000 f872 	bl	800031c <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, aRxBuffer, 16);
 8000238:	4910      	ldr	r1, [pc, #64]	; (800027c <main+0x5c>)
 800023a:	4b11      	ldr	r3, [pc, #68]	; (8000280 <main+0x60>)
 800023c:	2210      	movs	r2, #16
 800023e:	0018      	movs	r0, r3
 8000240:	f002 fbaa 	bl	8002998 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  *(uint64_t *)&TxData[0] = 0xEFBEADDEEFBEADDE;
 8000244:	4a0f      	ldr	r2, [pc, #60]	; (8000284 <main+0x64>)
 8000246:	4b10      	ldr	r3, [pc, #64]	; (8000288 <main+0x68>)
 8000248:	4c0f      	ldr	r4, [pc, #60]	; (8000288 <main+0x68>)
 800024a:	6013      	str	r3, [r2, #0]
 800024c:	6054      	str	r4, [r2, #4]
  while (1)
  {
	  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800024e:	4b0f      	ldr	r3, [pc, #60]	; (800028c <main+0x6c>)
 8000250:	4a0c      	ldr	r2, [pc, #48]	; (8000284 <main+0x64>)
 8000252:	490f      	ldr	r1, [pc, #60]	; (8000290 <main+0x70>)
 8000254:	480f      	ldr	r0, [pc, #60]	; (8000294 <main+0x74>)
 8000256:	f000 fdc7 	bl	8000de8 <HAL_CAN_AddTxMessage>
 800025a:	1e03      	subs	r3, r0, #0
 800025c:	d001      	beq.n	8000262 <main+0x42>
	  	  {
	          /* Transmission request Error */
	      	  Error_Handler();
 800025e:	f000 f9b7 	bl	80005d0 <Error_Handler>
	      }
    HAL_UART_Transmit(&huart2, (uint8_t *)"\nHey dude!\n", 11, 100);
 8000262:	490d      	ldr	r1, [pc, #52]	; (8000298 <main+0x78>)
 8000264:	4806      	ldr	r0, [pc, #24]	; (8000280 <main+0x60>)
 8000266:	2364      	movs	r3, #100	; 0x64
 8000268:	220b      	movs	r2, #11
 800026a:	f002 fa01 	bl	8002670 <HAL_UART_Transmit>
    // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
    HAL_Delay(1000);
 800026e:	23fa      	movs	r3, #250	; 0xfa
 8000270:	009b      	lsls	r3, r3, #2
 8000272:	0018      	movs	r0, r3
 8000274:	f000 fb60 	bl	8000938 <HAL_Delay>
	  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000278:	e7e9      	b.n	800024e <main+0x2e>
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	2000005c 	.word	0x2000005c
 8000280:	20000074 	.word	0x20000074
 8000284:	20000050 	.word	0x20000050
 8000288:	efbeadde 	.word	0xefbeadde
 800028c:	20000058 	.word	0x20000058
 8000290:	200000f4 	.word	0x200000f4
 8000294:	20000028 	.word	0x20000028
 8000298:	08003638 	.word	0x08003638

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b093      	sub	sp, #76	; 0x4c
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	2414      	movs	r4, #20
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	0018      	movs	r0, r3
 80002a8:	2334      	movs	r3, #52	; 0x34
 80002aa:	001a      	movs	r2, r3
 80002ac:	2100      	movs	r1, #0
 80002ae:	f003 f9af 	bl	8003610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	0018      	movs	r0, r3
 80002b6:	2310      	movs	r3, #16
 80002b8:	001a      	movs	r2, r3
 80002ba:	2100      	movs	r1, #0
 80002bc:	f003 f9a8 	bl	8003610 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c0:	0021      	movs	r1, r4
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2202      	movs	r2, #2
 80002c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2201      	movs	r2, #1
 80002cc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2210      	movs	r2, #16
 80002d2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2200      	movs	r2, #0
 80002d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	0018      	movs	r0, r3
 80002de:	f001 fc75 	bl	8001bcc <HAL_RCC_OscConfig>
 80002e2:	1e03      	subs	r3, r0, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002e6:	f000 f973 	bl	80005d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2207      	movs	r2, #7
 80002ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2200      	movs	r2, #0
 80002f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2100      	movs	r1, #0
 8000306:	0018      	movs	r0, r3
 8000308:	f001 ffe6 	bl	80022d8 <HAL_RCC_ClockConfig>
 800030c:	1e03      	subs	r3, r0, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000310:	f000 f95e 	bl	80005d0 <Error_Handler>
  }
}
 8000314:	46c0      	nop			; (mov r8, r8)
 8000316:	46bd      	mov	sp, r7
 8000318:	b013      	add	sp, #76	; 0x4c
 800031a:	bd90      	pop	{r4, r7, pc}

0800031c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b08a      	sub	sp, #40	; 0x28
 8000320:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000322:	4b3f      	ldr	r3, [pc, #252]	; (8000420 <MX_CAN_Init+0x104>)
 8000324:	4a3f      	ldr	r2, [pc, #252]	; (8000424 <MX_CAN_Init+0x108>)
 8000326:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000328:	4b3d      	ldr	r3, [pc, #244]	; (8000420 <MX_CAN_Init+0x104>)
 800032a:	2202      	movs	r2, #2
 800032c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800032e:	4b3c      	ldr	r3, [pc, #240]	; (8000420 <MX_CAN_Init+0x104>)
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000334:	4b3a      	ldr	r3, [pc, #232]	; (8000420 <MX_CAN_Init+0x104>)
 8000336:	2200      	movs	r2, #0
 8000338:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 800033a:	4b39      	ldr	r3, [pc, #228]	; (8000420 <MX_CAN_Init+0x104>)
 800033c:	22c0      	movs	r2, #192	; 0xc0
 800033e:	0292      	lsls	r2, r2, #10
 8000340:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000342:	4b37      	ldr	r3, [pc, #220]	; (8000420 <MX_CAN_Init+0x104>)
 8000344:	2280      	movs	r2, #128	; 0x80
 8000346:	0392      	lsls	r2, r2, #14
 8000348:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800034a:	4b35      	ldr	r3, [pc, #212]	; (8000420 <MX_CAN_Init+0x104>)
 800034c:	2200      	movs	r2, #0
 800034e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000350:	4b33      	ldr	r3, [pc, #204]	; (8000420 <MX_CAN_Init+0x104>)
 8000352:	2200      	movs	r2, #0
 8000354:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000356:	4b32      	ldr	r3, [pc, #200]	; (8000420 <MX_CAN_Init+0x104>)
 8000358:	2200      	movs	r2, #0
 800035a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800035c:	4b30      	ldr	r3, [pc, #192]	; (8000420 <MX_CAN_Init+0x104>)
 800035e:	2200      	movs	r2, #0
 8000360:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000362:	4b2f      	ldr	r3, [pc, #188]	; (8000420 <MX_CAN_Init+0x104>)
 8000364:	2200      	movs	r2, #0
 8000366:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000368:	4b2d      	ldr	r3, [pc, #180]	; (8000420 <MX_CAN_Init+0x104>)
 800036a:	2200      	movs	r2, #0
 800036c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800036e:	4b2c      	ldr	r3, [pc, #176]	; (8000420 <MX_CAN_Init+0x104>)
 8000370:	0018      	movs	r0, r3
 8000372:	f000 fb03 	bl	800097c <HAL_CAN_Init>
 8000376:	1e03      	subs	r3, r0, #0
 8000378:	d001      	beq.n	800037e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800037a:	f000 f929 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /*##-2- Configure the CAN Filter ###########################################*/
  sFilterConfig.FilterBank = 0;
 800037e:	003b      	movs	r3, r7
 8000380:	2200      	movs	r2, #0
 8000382:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000384:	003b      	movs	r3, r7
 8000386:	2200      	movs	r2, #0
 8000388:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800038a:	003b      	movs	r3, r7
 800038c:	2201      	movs	r2, #1
 800038e:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000390:	003b      	movs	r3, r7
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000396:	003b      	movs	r3, r7
 8000398:	2200      	movs	r2, #0
 800039a:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800039c:	003b      	movs	r3, r7
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80003a2:	003b      	movs	r3, r7
 80003a4:	2200      	movs	r2, #0
 80003a6:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80003a8:	003b      	movs	r3, r7
 80003aa:	2200      	movs	r2, #0
 80003ac:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80003ae:	003b      	movs	r3, r7
 80003b0:	2201      	movs	r2, #1
 80003b2:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80003b4:	003b      	movs	r3, r7
 80003b6:	220e      	movs	r2, #14
 80003b8:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80003ba:	003a      	movs	r2, r7
 80003bc:	4b18      	ldr	r3, [pc, #96]	; (8000420 <MX_CAN_Init+0x104>)
 80003be:	0011      	movs	r1, r2
 80003c0:	0018      	movs	r0, r3
 80003c2:	f000 fbd9 	bl	8000b78 <HAL_CAN_ConfigFilter>
 80003c6:	1e03      	subs	r3, r0, #0
 80003c8:	d001      	beq.n	80003ce <MX_CAN_Init+0xb2>
  {
    /* Filter configuration Error */
    Error_Handler();
 80003ca:	f000 f901 	bl	80005d0 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 80003ce:	4b14      	ldr	r3, [pc, #80]	; (8000420 <MX_CAN_Init+0x104>)
 80003d0:	0018      	movs	r0, r3
 80003d2:	f000 fcc3 	bl	8000d5c <HAL_CAN_Start>
 80003d6:	1e03      	subs	r3, r0, #0
 80003d8:	d001      	beq.n	80003de <MX_CAN_Init+0xc2>
  {
    /* Start Error */
    Error_Handler();
 80003da:	f000 f8f9 	bl	80005d0 <Error_Handler>
  }

    /*##-4- Activate CAN RX notification #######################################*/
    if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80003de:	4b10      	ldr	r3, [pc, #64]	; (8000420 <MX_CAN_Init+0x104>)
 80003e0:	2102      	movs	r1, #2
 80003e2:	0018      	movs	r0, r3
 80003e4:	f000 fefb 	bl	80011de <HAL_CAN_ActivateNotification>
 80003e8:	1e03      	subs	r3, r0, #0
 80003ea:	d001      	beq.n	80003f0 <MX_CAN_Init+0xd4>
    {
      /* Notification Error */
      Error_Handler();
 80003ec:	f000 f8f0 	bl	80005d0 <Error_Handler>
    }

    /*##-5- Configure Transmission process #####################################*/
    TxHeader.StdId = 0x117;
 80003f0:	4b0d      	ldr	r3, [pc, #52]	; (8000428 <MX_CAN_Init+0x10c>)
 80003f2:	2218      	movs	r2, #24
 80003f4:	32ff      	adds	r2, #255	; 0xff
 80003f6:	601a      	str	r2, [r3, #0]
    TxHeader.ExtId = 0x01;
 80003f8:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <MX_CAN_Init+0x10c>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	605a      	str	r2, [r3, #4]
    TxHeader.RTR = CAN_RTR_DATA;
 80003fe:	4b0a      	ldr	r3, [pc, #40]	; (8000428 <MX_CAN_Init+0x10c>)
 8000400:	2200      	movs	r2, #0
 8000402:	60da      	str	r2, [r3, #12]
    TxHeader.IDE = CAN_ID_STD;
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <MX_CAN_Init+0x10c>)
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 800040a:	4b07      	ldr	r3, [pc, #28]	; (8000428 <MX_CAN_Init+0x10c>)
 800040c:	2208      	movs	r2, #8
 800040e:	611a      	str	r2, [r3, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <MX_CAN_Init+0x10c>)
 8000412:	2200      	movs	r2, #0
 8000414:	751a      	strb	r2, [r3, #20]

  /* USER CODE END CAN_Init 2 */

}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	b00a      	add	sp, #40	; 0x28
 800041c:	bd80      	pop	{r7, pc}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	20000028 	.word	0x20000028
 8000424:	40006400 	.word	0x40006400
 8000428:	200000f4 	.word	0x200000f4

0800042c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <MX_USART2_UART_Init+0x58>)
 8000432:	4a15      	ldr	r2, [pc, #84]	; (8000488 <MX_USART2_UART_Init+0x5c>)
 8000434:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000436:	4b13      	ldr	r3, [pc, #76]	; (8000484 <MX_USART2_UART_Init+0x58>)
 8000438:	22e1      	movs	r2, #225	; 0xe1
 800043a:	0252      	lsls	r2, r2, #9
 800043c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800043e:	4b11      	ldr	r3, [pc, #68]	; (8000484 <MX_USART2_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <MX_USART2_UART_Init+0x58>)
 8000446:	2200      	movs	r2, #0
 8000448:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <MX_USART2_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <MX_USART2_UART_Init+0x58>)
 8000452:	220c      	movs	r2, #12
 8000454:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <MX_USART2_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800045c:	4b09      	ldr	r3, [pc, #36]	; (8000484 <MX_USART2_UART_Init+0x58>)
 800045e:	2200      	movs	r2, #0
 8000460:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000462:	4b08      	ldr	r3, [pc, #32]	; (8000484 <MX_USART2_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <MX_USART2_UART_Init+0x58>)
 800046a:	2200      	movs	r2, #0
 800046c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800046e:	4b05      	ldr	r3, [pc, #20]	; (8000484 <MX_USART2_UART_Init+0x58>)
 8000470:	0018      	movs	r0, r3
 8000472:	f002 f8a9 	bl	80025c8 <HAL_UART_Init>
 8000476:	1e03      	subs	r3, r0, #0
 8000478:	d001      	beq.n	800047e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800047a:	f000 f8a9 	bl	80005d0 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */
  // __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);  // Enable serial port idle interrupt

  /* USER CODE END USART2_Init 2 */

}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20000074 	.word	0x20000074
 8000488:	40004400 	.word	0x40004400

0800048c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800048c:	b590      	push	{r4, r7, lr}
 800048e:	b089      	sub	sp, #36	; 0x24
 8000490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	240c      	movs	r4, #12
 8000494:	193b      	adds	r3, r7, r4
 8000496:	0018      	movs	r0, r3
 8000498:	2314      	movs	r3, #20
 800049a:	001a      	movs	r2, r3
 800049c:	2100      	movs	r1, #0
 800049e:	f003 f8b7 	bl	8003610 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a2:	4b1c      	ldr	r3, [pc, #112]	; (8000514 <MX_GPIO_Init+0x88>)
 80004a4:	695a      	ldr	r2, [r3, #20]
 80004a6:	4b1b      	ldr	r3, [pc, #108]	; (8000514 <MX_GPIO_Init+0x88>)
 80004a8:	2180      	movs	r1, #128	; 0x80
 80004aa:	0289      	lsls	r1, r1, #10
 80004ac:	430a      	orrs	r2, r1
 80004ae:	615a      	str	r2, [r3, #20]
 80004b0:	4b18      	ldr	r3, [pc, #96]	; (8000514 <MX_GPIO_Init+0x88>)
 80004b2:	695a      	ldr	r2, [r3, #20]
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	029b      	lsls	r3, r3, #10
 80004b8:	4013      	ands	r3, r2
 80004ba:	60bb      	str	r3, [r7, #8]
 80004bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004be:	4b15      	ldr	r3, [pc, #84]	; (8000514 <MX_GPIO_Init+0x88>)
 80004c0:	695a      	ldr	r2, [r3, #20]
 80004c2:	4b14      	ldr	r3, [pc, #80]	; (8000514 <MX_GPIO_Init+0x88>)
 80004c4:	2180      	movs	r1, #128	; 0x80
 80004c6:	02c9      	lsls	r1, r1, #11
 80004c8:	430a      	orrs	r2, r1
 80004ca:	615a      	str	r2, [r3, #20]
 80004cc:	4b11      	ldr	r3, [pc, #68]	; (8000514 <MX_GPIO_Init+0x88>)
 80004ce:	695a      	ldr	r2, [r3, #20]
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	02db      	lsls	r3, r3, #11
 80004d4:	4013      	ands	r3, r2
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004da:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <MX_GPIO_Init+0x8c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	2108      	movs	r1, #8
 80004e0:	0018      	movs	r0, r3
 80004e2:	f001 fb3b 	bl	8001b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004e6:	0021      	movs	r1, r4
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2208      	movs	r2, #8
 80004ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2201      	movs	r2, #1
 80004f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2200      	movs	r2, #0
 80004fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000500:	187b      	adds	r3, r7, r1
 8000502:	4a05      	ldr	r2, [pc, #20]	; (8000518 <MX_GPIO_Init+0x8c>)
 8000504:	0019      	movs	r1, r3
 8000506:	0010      	movs	r0, r2
 8000508:	f001 f9c0 	bl	800188c <HAL_GPIO_Init>

}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b009      	add	sp, #36	; 0x24
 8000512:	bd90      	pop	{r4, r7, pc}
 8000514:	40021000 	.word	0x40021000
 8000518:	48000400 	.word	0x48000400

0800051c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  CanHandle: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b002      	add	sp, #8
 800052a:	bd80      	pop	{r7, pc}

0800052c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000534:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000536:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	2100      	movs	r1, #0
 800053c:	f000 fd33 	bl	8000fa6 <HAL_CAN_GetRxMessage>
 8000540:	1e03      	subs	r3, r0, #0
 8000542:	d001      	beq.n	8000548 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
  {
    /* Reception Error */
    Error_Handler();
 8000544:	f000 f844 	bl	80005d0 <Error_Handler>
  }

  if (RxHeader.StdId == 0x042) {
 8000548:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b42      	cmp	r3, #66	; 0x42
 800054e:	d10a      	bne.n	8000566 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
      HAL_GPIO_TogglePin(GPIOB, LED_Pin);
 8000550:	4b09      	ldr	r3, [pc, #36]	; (8000578 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000552:	2108      	movs	r1, #8
 8000554:	0018      	movs	r0, r3
 8000556:	f001 fb1e 	bl	8001b96 <HAL_GPIO_TogglePin>
      HAL_UART_Transmit(&huart2, (uint8_t *)"May the force be with you!\n", 50, 100);
 800055a:	4908      	ldr	r1, [pc, #32]	; (800057c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800055c:	4808      	ldr	r0, [pc, #32]	; (8000580 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800055e:	2364      	movs	r3, #100	; 0x64
 8000560:	2232      	movs	r2, #50	; 0x32
 8000562:	f002 f885 	bl	8002670 <HAL_UART_Transmit>
  }
}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	b002      	add	sp, #8
 800056c:	bd80      	pop	{r7, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	2000006c 	.word	0x2000006c
 8000574:	2000010c 	.word	0x2000010c
 8000578:	48000400 	.word	0x48000400
 800057c:	08003644 	.word	0x08003644
 8000580:	20000074 	.word	0x20000074

08000584 <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
   if(HAL_UART_Receive(&huart2, (uint8_t *)aRxBuffer, 1, 0x1FFFFFF) != HAL_OK)
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <HAL_UART_RxCpltCallback+0x3c>)
 800058e:	490d      	ldr	r1, [pc, #52]	; (80005c4 <HAL_UART_RxCpltCallback+0x40>)
 8000590:	480d      	ldr	r0, [pc, #52]	; (80005c8 <HAL_UART_RxCpltCallback+0x44>)
 8000592:	2201      	movs	r2, #1
 8000594:	f002 f914 	bl	80027c0 <HAL_UART_Receive>
 8000598:	1e03      	subs	r3, r0, #0
 800059a:	d001      	beq.n	80005a0 <HAL_UART_RxCpltCallback+0x1c>
   {
     Error_Handler();
 800059c:	f000 f818 	bl	80005d0 <Error_Handler>
   }

  HAL_UART_Transmit(&huart2, (uint8_t *)aRxBuffer, 1, 100);
 80005a0:	4908      	ldr	r1, [pc, #32]	; (80005c4 <HAL_UART_RxCpltCallback+0x40>)
 80005a2:	4809      	ldr	r0, [pc, #36]	; (80005c8 <HAL_UART_RxCpltCallback+0x44>)
 80005a4:	2364      	movs	r3, #100	; 0x64
 80005a6:	2201      	movs	r2, #1
 80005a8:	f002 f862 	bl	8002670 <HAL_UART_Transmit>
  HAL_GPIO_TogglePin(GPIOB, LED_Pin);
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <HAL_UART_RxCpltCallback+0x48>)
 80005ae:	2108      	movs	r1, #8
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 faf0 	bl	8001b96 <HAL_GPIO_TogglePin>

}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b002      	add	sp, #8
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	01ffffff 	.word	0x01ffffff
 80005c4:	2000005c 	.word	0x2000005c
 80005c8:	20000074 	.word	0x20000074
 80005cc:	48000400 	.word	0x48000400

080005d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <HAL_MspInit+0x44>)
 80005e4:	699a      	ldr	r2, [r3, #24]
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <HAL_MspInit+0x44>)
 80005e8:	2101      	movs	r1, #1
 80005ea:	430a      	orrs	r2, r1
 80005ec:	619a      	str	r2, [r3, #24]
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <HAL_MspInit+0x44>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	2201      	movs	r2, #1
 80005f4:	4013      	ands	r3, r2
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_MspInit+0x44>)
 80005fc:	69da      	ldr	r2, [r3, #28]
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <HAL_MspInit+0x44>)
 8000600:	2180      	movs	r1, #128	; 0x80
 8000602:	0549      	lsls	r1, r1, #21
 8000604:	430a      	orrs	r2, r1
 8000606:	61da      	str	r2, [r3, #28]
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <HAL_MspInit+0x44>)
 800060a:	69da      	ldr	r2, [r3, #28]
 800060c:	2380      	movs	r3, #128	; 0x80
 800060e:	055b      	lsls	r3, r3, #21
 8000610:	4013      	ands	r3, r2
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	b002      	add	sp, #8
 800061c:	bd80      	pop	{r7, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	40021000 	.word	0x40021000

08000624 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	; 0x28
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062c:	2314      	movs	r3, #20
 800062e:	18fb      	adds	r3, r7, r3
 8000630:	0018      	movs	r0, r3
 8000632:	2314      	movs	r3, #20
 8000634:	001a      	movs	r2, r3
 8000636:	2100      	movs	r1, #0
 8000638:	f002 ffea 	bl	8003610 <memset>
  if(hcan->Instance==CAN)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <HAL_CAN_MspInit+0xa4>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d13b      	bne.n	80006be <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000646:	4b21      	ldr	r3, [pc, #132]	; (80006cc <HAL_CAN_MspInit+0xa8>)
 8000648:	69da      	ldr	r2, [r3, #28]
 800064a:	4b20      	ldr	r3, [pc, #128]	; (80006cc <HAL_CAN_MspInit+0xa8>)
 800064c:	2180      	movs	r1, #128	; 0x80
 800064e:	0489      	lsls	r1, r1, #18
 8000650:	430a      	orrs	r2, r1
 8000652:	61da      	str	r2, [r3, #28]
 8000654:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <HAL_CAN_MspInit+0xa8>)
 8000656:	69da      	ldr	r2, [r3, #28]
 8000658:	2380      	movs	r3, #128	; 0x80
 800065a:	049b      	lsls	r3, r3, #18
 800065c:	4013      	ands	r3, r2
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <HAL_CAN_MspInit+0xa8>)
 8000664:	695a      	ldr	r2, [r3, #20]
 8000666:	4b19      	ldr	r3, [pc, #100]	; (80006cc <HAL_CAN_MspInit+0xa8>)
 8000668:	2180      	movs	r1, #128	; 0x80
 800066a:	0289      	lsls	r1, r1, #10
 800066c:	430a      	orrs	r2, r1
 800066e:	615a      	str	r2, [r3, #20]
 8000670:	4b16      	ldr	r3, [pc, #88]	; (80006cc <HAL_CAN_MspInit+0xa8>)
 8000672:	695a      	ldr	r2, [r3, #20]
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	029b      	lsls	r3, r3, #10
 8000678:	4013      	ands	r3, r2
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800067e:	2114      	movs	r1, #20
 8000680:	187b      	adds	r3, r7, r1
 8000682:	22c0      	movs	r2, #192	; 0xc0
 8000684:	0152      	lsls	r2, r2, #5
 8000686:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2202      	movs	r2, #2
 800068c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2203      	movs	r2, #3
 8000698:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2204      	movs	r2, #4
 800069e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	187a      	adds	r2, r7, r1
 80006a2:	2390      	movs	r3, #144	; 0x90
 80006a4:	05db      	lsls	r3, r3, #23
 80006a6:	0011      	movs	r1, r2
 80006a8:	0018      	movs	r0, r3
 80006aa:	f001 f8ef 	bl	800188c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	201e      	movs	r0, #30
 80006b4:	f001 f872 	bl	800179c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 80006b8:	201e      	movs	r0, #30
 80006ba:	f001 f884 	bl	80017c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b00a      	add	sp, #40	; 0x28
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	40006400 	.word	0x40006400
 80006cc:	40021000 	.word	0x40021000

080006d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	2314      	movs	r3, #20
 80006da:	18fb      	adds	r3, r7, r3
 80006dc:	0018      	movs	r0, r3
 80006de:	2314      	movs	r3, #20
 80006e0:	001a      	movs	r2, r3
 80006e2:	2100      	movs	r1, #0
 80006e4:	f002 ff94 	bl	8003610 <memset>
  if(huart->Instance==USART2)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a20      	ldr	r2, [pc, #128]	; (8000770 <HAL_UART_MspInit+0xa0>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d13a      	bne.n	8000768 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006f2:	4b20      	ldr	r3, [pc, #128]	; (8000774 <HAL_UART_MspInit+0xa4>)
 80006f4:	69da      	ldr	r2, [r3, #28]
 80006f6:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <HAL_UART_MspInit+0xa4>)
 80006f8:	2180      	movs	r1, #128	; 0x80
 80006fa:	0289      	lsls	r1, r1, #10
 80006fc:	430a      	orrs	r2, r1
 80006fe:	61da      	str	r2, [r3, #28]
 8000700:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <HAL_UART_MspInit+0xa4>)
 8000702:	69da      	ldr	r2, [r3, #28]
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	029b      	lsls	r3, r3, #10
 8000708:	4013      	ands	r3, r2
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b19      	ldr	r3, [pc, #100]	; (8000774 <HAL_UART_MspInit+0xa4>)
 8000710:	695a      	ldr	r2, [r3, #20]
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <HAL_UART_MspInit+0xa4>)
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	0289      	lsls	r1, r1, #10
 8000718:	430a      	orrs	r2, r1
 800071a:	615a      	str	r2, [r3, #20]
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <HAL_UART_MspInit+0xa4>)
 800071e:	695a      	ldr	r2, [r3, #20]
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	029b      	lsls	r3, r3, #10
 8000724:	4013      	ands	r3, r2
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800072a:	2114      	movs	r1, #20
 800072c:	187b      	adds	r3, r7, r1
 800072e:	4a12      	ldr	r2, [pc, #72]	; (8000778 <HAL_UART_MspInit+0xa8>)
 8000730:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2202      	movs	r2, #2
 8000736:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2203      	movs	r2, #3
 8000742:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2201      	movs	r2, #1
 8000748:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074a:	187a      	adds	r2, r7, r1
 800074c:	2390      	movs	r3, #144	; 0x90
 800074e:	05db      	lsls	r3, r3, #23
 8000750:	0011      	movs	r1, r2
 8000752:	0018      	movs	r0, r3
 8000754:	f001 f89a 	bl	800188c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000758:	2200      	movs	r2, #0
 800075a:	2100      	movs	r1, #0
 800075c:	201c      	movs	r0, #28
 800075e:	f001 f81d 	bl	800179c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000762:	201c      	movs	r0, #28
 8000764:	f001 f82f 	bl	80017c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	b00a      	add	sp, #40	; 0x28
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40004400 	.word	0x40004400
 8000774:	40021000 	.word	0x40021000
 8000778:	00008004 	.word	0x00008004

0800077c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <HardFault_Handler+0x4>

0800078c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a4:	f000 f8ac 	bl	8000900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007b4:	4b03      	ldr	r3, [pc, #12]	; (80007c4 <USART2_IRQHandler+0x14>)
 80007b6:	0018      	movs	r0, r3
 80007b8:	f002 f9a6 	bl	8002b08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	20000074 	.word	0x20000074

080007c8 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007cc:	4b03      	ldr	r3, [pc, #12]	; (80007dc <CEC_CAN_IRQHandler+0x14>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f000 fd2f 	bl	8001232 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	20000028 	.word	0x20000028

080007e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007ec:	4813      	ldr	r0, [pc, #76]	; (800083c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ee:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80007f0:	4813      	ldr	r0, [pc, #76]	; (8000840 <LoopForever+0x6>)
    LDR R1, [R0]
 80007f2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80007f4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80007f6:	4a13      	ldr	r2, [pc, #76]	; (8000844 <LoopForever+0xa>)
    CMP R1, R2
 80007f8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80007fa:	d105      	bne.n	8000808 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80007fc:	4812      	ldr	r0, [pc, #72]	; (8000848 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80007fe:	4913      	ldr	r1, [pc, #76]	; (800084c <LoopForever+0x12>)
    STR R1, [R0]
 8000800:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000802:	4813      	ldr	r0, [pc, #76]	; (8000850 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000804:	4913      	ldr	r1, [pc, #76]	; (8000854 <LoopForever+0x1a>)
    STR R1, [R0]
 8000806:	6001      	str	r1, [r0, #0]

08000808 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000808:	4813      	ldr	r0, [pc, #76]	; (8000858 <LoopForever+0x1e>)
  ldr r1, =_edata
 800080a:	4914      	ldr	r1, [pc, #80]	; (800085c <LoopForever+0x22>)
  ldr r2, =_sidata
 800080c:	4a14      	ldr	r2, [pc, #80]	; (8000860 <LoopForever+0x26>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000810:	e002      	b.n	8000818 <LoopCopyDataInit>

08000812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000816:	3304      	adds	r3, #4

08000818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800081c:	d3f9      	bcc.n	8000812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081e:	4a11      	ldr	r2, [pc, #68]	; (8000864 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000820:	4c11      	ldr	r4, [pc, #68]	; (8000868 <LoopForever+0x2e>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000824:	e001      	b.n	800082a <LoopFillZerobss>

08000826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000828:	3204      	adds	r2, #4

0800082a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800082c:	d3fb      	bcc.n	8000826 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800082e:	f7ff ffd7 	bl	80007e0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000832:	f002 fec9 	bl	80035c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000836:	f7ff fcf3 	bl	8000220 <main>

0800083a <LoopForever>:

LoopForever:
    b LoopForever
 800083a:	e7fe      	b.n	800083a <LoopForever>
  ldr   r0, =_estack
 800083c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000840:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000844:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000848:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 800084c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000850:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000854:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800085c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000860:	080036a0 	.word	0x080036a0
  ldr r2, =_sbss
 8000864:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000868:	2000012c 	.word	0x2000012c

0800086c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800086c:	e7fe      	b.n	800086c <ADC1_IRQHandler>
	...

08000870 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <HAL_Init+0x24>)
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_Init+0x24>)
 800087a:	2110      	movs	r1, #16
 800087c:	430a      	orrs	r2, r1
 800087e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000880:	2000      	movs	r0, #0
 8000882:	f000 f809 	bl	8000898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000886:	f7ff fea9 	bl	80005dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800088a:	2300      	movs	r3, #0
}
 800088c:	0018      	movs	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	40022000 	.word	0x40022000

08000898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <HAL_InitTick+0x5c>)
 80008a2:	681c      	ldr	r4, [r3, #0]
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <HAL_InitTick+0x60>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	0019      	movs	r1, r3
 80008aa:	23fa      	movs	r3, #250	; 0xfa
 80008ac:	0098      	lsls	r0, r3, #2
 80008ae:	f7ff fc2b 	bl	8000108 <__udivsi3>
 80008b2:	0003      	movs	r3, r0
 80008b4:	0019      	movs	r1, r3
 80008b6:	0020      	movs	r0, r4
 80008b8:	f7ff fc26 	bl	8000108 <__udivsi3>
 80008bc:	0003      	movs	r3, r0
 80008be:	0018      	movs	r0, r3
 80008c0:	f000 ff91 	bl	80017e6 <HAL_SYSTICK_Config>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d001      	beq.n	80008cc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008c8:	2301      	movs	r3, #1
 80008ca:	e00f      	b.n	80008ec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b03      	cmp	r3, #3
 80008d0:	d80b      	bhi.n	80008ea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d2:	6879      	ldr	r1, [r7, #4]
 80008d4:	2301      	movs	r3, #1
 80008d6:	425b      	negs	r3, r3
 80008d8:	2200      	movs	r2, #0
 80008da:	0018      	movs	r0, r3
 80008dc:	f000 ff5e 	bl	800179c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_InitTick+0x64>)
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008e6:	2300      	movs	r3, #0
 80008e8:	e000      	b.n	80008ec <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
}
 80008ec:	0018      	movs	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b003      	add	sp, #12
 80008f2:	bd90      	pop	{r4, r7, pc}
 80008f4:	20000000 	.word	0x20000000
 80008f8:	20000008 	.word	0x20000008
 80008fc:	20000004 	.word	0x20000004

08000900 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <HAL_IncTick+0x1c>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	001a      	movs	r2, r3
 800090a:	4b05      	ldr	r3, [pc, #20]	; (8000920 <HAL_IncTick+0x20>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	18d2      	adds	r2, r2, r3
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <HAL_IncTick+0x20>)
 8000912:	601a      	str	r2, [r3, #0]
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	20000008 	.word	0x20000008
 8000920:	20000128 	.word	0x20000128

08000924 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  return uwTick;
 8000928:	4b02      	ldr	r3, [pc, #8]	; (8000934 <HAL_GetTick+0x10>)
 800092a:	681b      	ldr	r3, [r3, #0]
}
 800092c:	0018      	movs	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	20000128 	.word	0x20000128

08000938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000940:	f7ff fff0 	bl	8000924 <HAL_GetTick>
 8000944:	0003      	movs	r3, r0
 8000946:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	3301      	adds	r3, #1
 8000950:	d005      	beq.n	800095e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_Delay+0x40>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	001a      	movs	r2, r3
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	189b      	adds	r3, r3, r2
 800095c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	f7ff ffe0 	bl	8000924 <HAL_GetTick>
 8000964:	0002      	movs	r2, r0
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	429a      	cmp	r2, r3
 800096e:	d8f7      	bhi.n	8000960 <HAL_Delay+0x28>
  {
  }
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	b004      	add	sp, #16
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000008 	.word	0x20000008

0800097c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d101      	bne.n	800098e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e0f0      	b.n	8000b70 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2220      	movs	r2, #32
 8000992:	5c9b      	ldrb	r3, [r3, r2]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b00      	cmp	r3, #0
 8000998:	d103      	bne.n	80009a2 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	0018      	movs	r0, r3
 800099e:	f7ff fe41 	bl	8000624 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2102      	movs	r1, #2
 80009ae:	438a      	bics	r2, r1
 80009b0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009b2:	f7ff ffb7 	bl	8000924 <HAL_GetTick>
 80009b6:	0003      	movs	r3, r0
 80009b8:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009ba:	e013      	b.n	80009e4 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009bc:	f7ff ffb2 	bl	8000924 <HAL_GetTick>
 80009c0:	0002      	movs	r2, r0
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	2b0a      	cmp	r3, #10
 80009c8:	d90c      	bls.n	80009e4 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ce:	2280      	movs	r2, #128	; 0x80
 80009d0:	0292      	lsls	r2, r2, #10
 80009d2:	431a      	orrs	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2220      	movs	r2, #32
 80009dc:	2105      	movs	r1, #5
 80009de:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80009e0:	2301      	movs	r3, #1
 80009e2:	e0c5      	b.n	8000b70 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	2202      	movs	r2, #2
 80009ec:	4013      	ands	r3, r2
 80009ee:	d1e5      	bne.n	80009bc <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2101      	movs	r1, #1
 80009fc:	430a      	orrs	r2, r1
 80009fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a00:	f7ff ff90 	bl	8000924 <HAL_GetTick>
 8000a04:	0003      	movs	r3, r0
 8000a06:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a08:	e013      	b.n	8000a32 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a0a:	f7ff ff8b 	bl	8000924 <HAL_GetTick>
 8000a0e:	0002      	movs	r2, r0
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	2b0a      	cmp	r3, #10
 8000a16:	d90c      	bls.n	8000a32 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1c:	2280      	movs	r2, #128	; 0x80
 8000a1e:	0292      	lsls	r2, r2, #10
 8000a20:	431a      	orrs	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2220      	movs	r2, #32
 8000a2a:	2105      	movs	r1, #5
 8000a2c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e09e      	b.n	8000b70 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	d0e5      	beq.n	8000a0a <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	7e1b      	ldrb	r3, [r3, #24]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d108      	bne.n	8000a58 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2180      	movs	r1, #128	; 0x80
 8000a52:	430a      	orrs	r2, r1
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	e007      	b.n	8000a68 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2180      	movs	r1, #128	; 0x80
 8000a64:	438a      	bics	r2, r1
 8000a66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	7e5b      	ldrb	r3, [r3, #25]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d108      	bne.n	8000a82 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2140      	movs	r1, #64	; 0x40
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	e007      	b.n	8000a92 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2140      	movs	r1, #64	; 0x40
 8000a8e:	438a      	bics	r2, r1
 8000a90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	7e9b      	ldrb	r3, [r3, #26]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d108      	bne.n	8000aac <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2120      	movs	r1, #32
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	e007      	b.n	8000abc <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2120      	movs	r1, #32
 8000ab8:	438a      	bics	r2, r1
 8000aba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	7edb      	ldrb	r3, [r3, #27]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d108      	bne.n	8000ad6 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2110      	movs	r1, #16
 8000ad0:	438a      	bics	r2, r1
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	e007      	b.n	8000ae6 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2110      	movs	r1, #16
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	7f1b      	ldrb	r3, [r3, #28]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d108      	bne.n	8000b00 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2108      	movs	r1, #8
 8000afa:	430a      	orrs	r2, r1
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	e007      	b.n	8000b10 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2108      	movs	r1, #8
 8000b0c:	438a      	bics	r2, r1
 8000b0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	7f5b      	ldrb	r3, [r3, #29]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d108      	bne.n	8000b2a <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2104      	movs	r1, #4
 8000b24:	430a      	orrs	r2, r1
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	e007      	b.n	8000b3a <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2104      	movs	r1, #4
 8000b36:	438a      	bics	r2, r1
 8000b38:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	689a      	ldr	r2, [r3, #8]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	431a      	orrs	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	691b      	ldr	r3, [r3, #16]
 8000b48:	431a      	orrs	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	431a      	orrs	r2, r3
 8000b50:	0011      	movs	r1, r2
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	1e5a      	subs	r2, r3, #1
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2220      	movs	r2, #32
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000b6e:	2300      	movs	r3, #0
}
 8000b70:	0018      	movs	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b004      	add	sp, #16
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b88:	2013      	movs	r0, #19
 8000b8a:	183b      	adds	r3, r7, r0
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	2120      	movs	r1, #32
 8000b90:	5c52      	ldrb	r2, [r2, r1]
 8000b92:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b94:	183b      	adds	r3, r7, r0
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d005      	beq.n	8000ba8 <HAL_CAN_ConfigFilter+0x30>
 8000b9c:	2313      	movs	r3, #19
 8000b9e:	18fb      	adds	r3, r7, r3
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d000      	beq.n	8000ba8 <HAL_CAN_ConfigFilter+0x30>
 8000ba6:	e0cd      	b.n	8000d44 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ba8:	697a      	ldr	r2, [r7, #20]
 8000baa:	2380      	movs	r3, #128	; 0x80
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	58d3      	ldr	r3, [r2, r3]
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	431a      	orrs	r2, r3
 8000bb4:	0011      	movs	r1, r2
 8000bb6:	697a      	ldr	r2, [r7, #20]
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	221f      	movs	r2, #31
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	409a      	lsls	r2, r3
 8000bca:	0013      	movs	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000bce:	697a      	ldr	r2, [r7, #20]
 8000bd0:	2387      	movs	r3, #135	; 0x87
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	58d3      	ldr	r3, [r2, r3]
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	43d2      	mvns	r2, r2
 8000bda:	401a      	ands	r2, r3
 8000bdc:	0011      	movs	r1, r2
 8000bde:	697a      	ldr	r2, [r7, #20]
 8000be0:	2387      	movs	r3, #135	; 0x87
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d129      	bne.n	8000c42 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000bee:	697a      	ldr	r2, [r7, #20]
 8000bf0:	2383      	movs	r3, #131	; 0x83
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	58d3      	ldr	r3, [r2, r3]
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	43d2      	mvns	r2, r2
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	0011      	movs	r1, r2
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	2383      	movs	r3, #131	; 0x83
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	041b      	lsls	r3, r3, #16
 8000c12:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c18:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3248      	adds	r2, #72	; 0x48
 8000c1e:	00d2      	lsls	r2, r2, #3
 8000c20:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	041b      	lsls	r3, r3, #16
 8000c2e:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c34:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c36:	6979      	ldr	r1, [r7, #20]
 8000c38:	3348      	adds	r3, #72	; 0x48
 8000c3a:	00db      	lsls	r3, r3, #3
 8000c3c:	18cb      	adds	r3, r1, r3
 8000c3e:	3304      	adds	r3, #4
 8000c40:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d128      	bne.n	8000c9c <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	2383      	movs	r3, #131	; 0x83
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	58d2      	ldr	r2, [r2, r3]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	431a      	orrs	r2, r3
 8000c56:	0011      	movs	r1, r2
 8000c58:	697a      	ldr	r2, [r7, #20]
 8000c5a:	2383      	movs	r3, #131	; 0x83
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	041b      	lsls	r3, r3, #16
 8000c6c:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c72:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	3248      	adds	r2, #72	; 0x48
 8000c78:	00d2      	lsls	r2, r2, #3
 8000c7a:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	041b      	lsls	r3, r3, #16
 8000c88:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c8e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c90:	6979      	ldr	r1, [r7, #20]
 8000c92:	3348      	adds	r3, #72	; 0x48
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	18cb      	adds	r3, r1, r3
 8000c98:	3304      	adds	r3, #4
 8000c9a:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d10c      	bne.n	8000cbe <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ca4:	697a      	ldr	r2, [r7, #20]
 8000ca6:	2381      	movs	r3, #129	; 0x81
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	58d3      	ldr	r3, [r2, r3]
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	43d2      	mvns	r2, r2
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	0011      	movs	r1, r2
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	2381      	movs	r3, #129	; 0x81
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	50d1      	str	r1, [r2, r3]
 8000cbc:	e00a      	b.n	8000cd4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	2381      	movs	r3, #129	; 0x81
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	58d2      	ldr	r2, [r2, r3]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	0011      	movs	r1, r2
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	2381      	movs	r3, #129	; 0x81
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	691b      	ldr	r3, [r3, #16]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d10c      	bne.n	8000cf6 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	2385      	movs	r3, #133	; 0x85
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	58d3      	ldr	r3, [r2, r3]
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	43d2      	mvns	r2, r2
 8000ce8:	401a      	ands	r2, r3
 8000cea:	0011      	movs	r1, r2
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	2385      	movs	r3, #133	; 0x85
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	50d1      	str	r1, [r2, r3]
 8000cf4:	e00a      	b.n	8000d0c <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	2385      	movs	r3, #133	; 0x85
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	58d2      	ldr	r2, [r2, r3]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	431a      	orrs	r2, r3
 8000d02:	0011      	movs	r1, r2
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	2385      	movs	r3, #133	; 0x85
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	6a1b      	ldr	r3, [r3, #32]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d10a      	bne.n	8000d2a <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	2387      	movs	r3, #135	; 0x87
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	58d2      	ldr	r2, [r2, r3]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	0011      	movs	r1, r2
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	2387      	movs	r3, #135	; 0x87
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	58d3      	ldr	r3, [r2, r3]
 8000d32:	2201      	movs	r2, #1
 8000d34:	4393      	bics	r3, r2
 8000d36:	0019      	movs	r1, r3
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000d40:	2300      	movs	r3, #0
 8000d42:	e007      	b.n	8000d54 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	02d2      	lsls	r2, r2, #11
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
  }
}
 8000d54:	0018      	movs	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b006      	add	sp, #24
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2220      	movs	r2, #32
 8000d68:	5c9b      	ldrb	r3, [r3, r2]
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d12f      	bne.n	8000dd0 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2220      	movs	r2, #32
 8000d74:	2102      	movs	r1, #2
 8000d76:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2101      	movs	r1, #1
 8000d84:	438a      	bics	r2, r1
 8000d86:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d88:	f7ff fdcc 	bl	8000924 <HAL_GetTick>
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d90:	e013      	b.n	8000dba <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d92:	f7ff fdc7 	bl	8000924 <HAL_GetTick>
 8000d96:	0002      	movs	r2, r0
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	2b0a      	cmp	r3, #10
 8000d9e:	d90c      	bls.n	8000dba <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da4:	2280      	movs	r2, #128	; 0x80
 8000da6:	0292      	lsls	r2, r2, #10
 8000da8:	431a      	orrs	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2220      	movs	r2, #32
 8000db2:	2105      	movs	r1, #5
 8000db4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e012      	b.n	8000de0 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	d1e5      	bne.n	8000d92 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	e007      	b.n	8000de0 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd4:	2280      	movs	r2, #128	; 0x80
 8000dd6:	0312      	lsls	r2, r2, #12
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
  }
}
 8000de0:	0018      	movs	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b004      	add	sp, #16
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
 8000df4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000df6:	201f      	movs	r0, #31
 8000df8:	183b      	adds	r3, r7, r0
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	2120      	movs	r1, #32
 8000dfe:	5c52      	ldrb	r2, [r2, r1]
 8000e00:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e0a:	183b      	adds	r3, r7, r0
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d005      	beq.n	8000e1e <HAL_CAN_AddTxMessage+0x36>
 8000e12:	231f      	movs	r3, #31
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d000      	beq.n	8000e1e <HAL_CAN_AddTxMessage+0x36>
 8000e1c:	e0b7      	b.n	8000f8e <HAL_CAN_AddTxMessage+0x1a6>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	2380      	movs	r3, #128	; 0x80
 8000e22:	04db      	lsls	r3, r3, #19
 8000e24:	4013      	ands	r3, r2
 8000e26:	d10a      	bne.n	8000e3e <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	051b      	lsls	r3, r3, #20
 8000e2e:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e30:	d105      	bne.n	8000e3e <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	055b      	lsls	r3, r3, #21
 8000e38:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e3a:	d100      	bne.n	8000e3e <HAL_CAN_AddTxMessage+0x56>
 8000e3c:	e09e      	b.n	8000f7c <HAL_CAN_AddTxMessage+0x194>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	0e1b      	lsrs	r3, r3, #24
 8000e42:	2203      	movs	r2, #3
 8000e44:	4013      	ands	r3, r2
 8000e46:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d908      	bls.n	8000e60 <HAL_CAN_AddTxMessage+0x78>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e52:	2280      	movs	r2, #128	; 0x80
 8000e54:	0412      	lsls	r2, r2, #16
 8000e56:	431a      	orrs	r2, r3
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e09e      	b.n	8000f9e <HAL_CAN_AddTxMessage+0x1b6>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e60:	2201      	movs	r2, #1
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	409a      	lsls	r2, r3
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d10c      	bne.n	8000e8c <HAL_CAN_AddTxMessage+0xa4>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4311      	orrs	r1, r2
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	3218      	adds	r2, #24
 8000e86:	0112      	lsls	r2, r2, #4
 8000e88:	50d1      	str	r1, [r2, r3]
 8000e8a:	e00f      	b.n	8000eac <HAL_CAN_AddTxMessage+0xc4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e96:	431a      	orrs	r2, r3
 8000e98:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8000ea2:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	3218      	adds	r2, #24
 8000ea8:	0112      	lsls	r2, r2, #4
 8000eaa:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	6819      	ldr	r1, [r3, #0]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	691a      	ldr	r2, [r3, #16]
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	3318      	adds	r3, #24
 8000eb8:	011b      	lsls	r3, r3, #4
 8000eba:	18cb      	adds	r3, r1, r3
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	7d1b      	ldrb	r3, [r3, #20]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d112      	bne.n	8000eee <HAL_CAN_AddTxMessage+0x106>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	3318      	adds	r3, #24
 8000ed0:	011b      	lsls	r3, r3, #4
 8000ed2:	18d3      	adds	r3, r2, r3
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	6819      	ldr	r1, [r3, #0]
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	3318      	adds	r3, #24
 8000ee6:	011b      	lsls	r3, r3, #4
 8000ee8:	18cb      	adds	r3, r1, r3
 8000eea:	3304      	adds	r3, #4
 8000eec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3307      	adds	r3, #7
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	061a      	lsls	r2, r3, #24
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3306      	adds	r3, #6
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	041b      	lsls	r3, r3, #16
 8000efe:	431a      	orrs	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3305      	adds	r3, #5
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	0019      	movs	r1, r3
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	6818      	ldr	r0, [r3, #0]
 8000f16:	430a      	orrs	r2, r1
 8000f18:	6979      	ldr	r1, [r7, #20]
 8000f1a:	23c6      	movs	r3, #198	; 0xc6
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	0109      	lsls	r1, r1, #4
 8000f20:	1841      	adds	r1, r0, r1
 8000f22:	18cb      	adds	r3, r1, r3
 8000f24:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3303      	adds	r3, #3
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	061a      	lsls	r2, r3, #24
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3302      	adds	r3, #2
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	041b      	lsls	r3, r3, #16
 8000f36:	431a      	orrs	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	021b      	lsls	r3, r3, #8
 8000f40:	431a      	orrs	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	0019      	movs	r1, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6818      	ldr	r0, [r3, #0]
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	6979      	ldr	r1, [r7, #20]
 8000f50:	23c4      	movs	r3, #196	; 0xc4
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	0109      	lsls	r1, r1, #4
 8000f56:	1841      	adds	r1, r0, r1
 8000f58:	18cb      	adds	r3, r1, r3
 8000f5a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	3218      	adds	r2, #24
 8000f64:	0112      	lsls	r2, r2, #4
 8000f66:	58d2      	ldr	r2, [r2, r3]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	4311      	orrs	r1, r2
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	3218      	adds	r2, #24
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e010      	b.n	8000f9e <HAL_CAN_AddTxMessage+0x1b6>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f80:	2280      	movs	r2, #128	; 0x80
 8000f82:	0392      	lsls	r2, r2, #14
 8000f84:	431a      	orrs	r2, r3
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e007      	b.n	8000f9e <HAL_CAN_AddTxMessage+0x1b6>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f92:	2280      	movs	r2, #128	; 0x80
 8000f94:	02d2      	lsls	r2, r2, #11
 8000f96:	431a      	orrs	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
  }
}
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	b008      	add	sp, #32
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60f8      	str	r0, [r7, #12]
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fb4:	2017      	movs	r0, #23
 8000fb6:	183b      	adds	r3, r7, r0
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	2120      	movs	r1, #32
 8000fbc:	5c52      	ldrb	r2, [r2, r1]
 8000fbe:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fc0:	183b      	adds	r3, r7, r0
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d005      	beq.n	8000fd4 <HAL_CAN_GetRxMessage+0x2e>
 8000fc8:	2317      	movs	r3, #23
 8000fca:	18fb      	adds	r3, r7, r3
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d000      	beq.n	8000fd4 <HAL_CAN_GetRxMessage+0x2e>
 8000fd2:	e0f8      	b.n	80011c6 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10e      	bne.n	8000ff8 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	d117      	bne.n	8001016 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fea:	2280      	movs	r2, #128	; 0x80
 8000fec:	0392      	lsls	r2, r2, #14
 8000fee:	431a      	orrs	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e0ee      	b.n	80011d6 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	691b      	ldr	r3, [r3, #16]
 8000ffe:	2203      	movs	r2, #3
 8001000:	4013      	ands	r3, r2
 8001002:	d108      	bne.n	8001016 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	2280      	movs	r2, #128	; 0x80
 800100a:	0392      	lsls	r2, r2, #14
 800100c:	431a      	orrs	r2, r3
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e0df      	b.n	80011d6 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	321b      	adds	r2, #27
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	58d3      	ldr	r3, [r2, r3]
 8001022:	2204      	movs	r2, #4
 8001024:	401a      	ands	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d10b      	bne.n	800104a <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	321b      	adds	r2, #27
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	58d3      	ldr	r3, [r2, r3]
 800103e:	0d5b      	lsrs	r3, r3, #21
 8001040:	055b      	lsls	r3, r3, #21
 8001042:	0d5a      	lsrs	r2, r3, #21
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	e00a      	b.n	8001060 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	321b      	adds	r2, #27
 8001052:	0112      	lsls	r2, r2, #4
 8001054:	58d3      	ldr	r3, [r2, r3]
 8001056:	08db      	lsrs	r3, r3, #3
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	08da      	lsrs	r2, r3, #3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	68ba      	ldr	r2, [r7, #8]
 8001066:	321b      	adds	r2, #27
 8001068:	0112      	lsls	r2, r2, #4
 800106a:	58d3      	ldr	r3, [r2, r3]
 800106c:	2202      	movs	r2, #2
 800106e:	401a      	ands	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	331b      	adds	r3, #27
 800107c:	011b      	lsls	r3, r3, #4
 800107e:	18d3      	adds	r3, r2, r3
 8001080:	3304      	adds	r3, #4
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	220f      	movs	r2, #15
 8001086:	401a      	ands	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	331b      	adds	r3, #27
 8001094:	011b      	lsls	r3, r3, #4
 8001096:	18d3      	adds	r3, r2, r3
 8001098:	3304      	adds	r3, #4
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	22ff      	movs	r2, #255	; 0xff
 80010a0:	401a      	ands	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	331b      	adds	r3, #27
 80010ae:	011b      	lsls	r3, r3, #4
 80010b0:	18d3      	adds	r3, r2, r3
 80010b2:	3304      	adds	r3, #4
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	0c1b      	lsrs	r3, r3, #16
 80010b8:	041b      	lsls	r3, r3, #16
 80010ba:	0c1a      	lsrs	r2, r3, #16
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	6819      	ldr	r1, [r3, #0]
 80010c4:	68ba      	ldr	r2, [r7, #8]
 80010c6:	23dc      	movs	r3, #220	; 0xdc
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	188a      	adds	r2, r1, r2
 80010ce:	18d3      	adds	r3, r2, r3
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6819      	ldr	r1, [r3, #0]
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	23dc      	movs	r3, #220	; 0xdc
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	188a      	adds	r2, r1, r2
 80010e6:	18d3      	adds	r3, r2, r3
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	0a1a      	lsrs	r2, r3, #8
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	3301      	adds	r3, #1
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6819      	ldr	r1, [r3, #0]
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	23dc      	movs	r3, #220	; 0xdc
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	0112      	lsls	r2, r2, #4
 8001100:	188a      	adds	r2, r1, r2
 8001102:	18d3      	adds	r3, r2, r3
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	0c1a      	lsrs	r2, r3, #16
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	3302      	adds	r3, #2
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6819      	ldr	r1, [r3, #0]
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	23dc      	movs	r3, #220	; 0xdc
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	0112      	lsls	r2, r2, #4
 800111c:	188a      	adds	r2, r1, r2
 800111e:	18d3      	adds	r3, r2, r3
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	0e1a      	lsrs	r2, r3, #24
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	3303      	adds	r3, #3
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6819      	ldr	r1, [r3, #0]
 8001130:	68ba      	ldr	r2, [r7, #8]
 8001132:	23de      	movs	r3, #222	; 0xde
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	0112      	lsls	r2, r2, #4
 8001138:	188a      	adds	r2, r1, r2
 800113a:	18d3      	adds	r3, r2, r3
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	3304      	adds	r3, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6819      	ldr	r1, [r3, #0]
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	23de      	movs	r3, #222	; 0xde
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	0112      	lsls	r2, r2, #4
 8001152:	188a      	adds	r2, r1, r2
 8001154:	18d3      	adds	r3, r2, r3
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	0a1a      	lsrs	r2, r3, #8
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	3305      	adds	r3, #5
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	6819      	ldr	r1, [r3, #0]
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	23de      	movs	r3, #222	; 0xde
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	188a      	adds	r2, r1, r2
 8001170:	18d3      	adds	r3, r2, r3
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	0c1a      	lsrs	r2, r3, #16
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	3306      	adds	r3, #6
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	6819      	ldr	r1, [r3, #0]
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	23de      	movs	r3, #222	; 0xde
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	0112      	lsls	r2, r2, #4
 800118a:	188a      	adds	r2, r1, r2
 800118c:	18d3      	adds	r3, r2, r3
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	0e1a      	lsrs	r2, r3, #24
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	3307      	adds	r3, #7
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d108      	bne.n	80011b2 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2120      	movs	r1, #32
 80011ac:	430a      	orrs	r2, r1
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	e007      	b.n	80011c2 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	691a      	ldr	r2, [r3, #16]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2120      	movs	r1, #32
 80011be:	430a      	orrs	r2, r1
 80011c0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	e007      	b.n	80011d6 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	2280      	movs	r2, #128	; 0x80
 80011cc:	02d2      	lsls	r2, r2, #11
 80011ce:	431a      	orrs	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
  }
}
 80011d6:	0018      	movs	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	b006      	add	sp, #24
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b084      	sub	sp, #16
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011e8:	200f      	movs	r0, #15
 80011ea:	183b      	adds	r3, r7, r0
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	2120      	movs	r1, #32
 80011f0:	5c52      	ldrb	r2, [r2, r1]
 80011f2:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80011f4:	183b      	adds	r3, r7, r0
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d004      	beq.n	8001206 <HAL_CAN_ActivateNotification+0x28>
 80011fc:	230f      	movs	r3, #15
 80011fe:	18fb      	adds	r3, r7, r3
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b02      	cmp	r3, #2
 8001204:	d109      	bne.n	800121a <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6959      	ldr	r1, [r3, #20]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	430a      	orrs	r2, r1
 8001214:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	e007      	b.n	800122a <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	02d2      	lsls	r2, r2, #11
 8001222:	431a      	orrs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
  }
}
 800122a:	0018      	movs	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	b004      	add	sp, #16
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b08a      	sub	sp, #40	; 0x28
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	2201      	movs	r2, #1
 8001272:	4013      	ands	r3, r2
 8001274:	d100      	bne.n	8001278 <HAL_CAN_IRQHandler+0x46>
 8001276:	e084      	b.n	8001382 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	2201      	movs	r2, #1
 800127c:	4013      	ands	r3, r2
 800127e:	d024      	beq.n	80012ca <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2201      	movs	r2, #1
 8001286:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	2202      	movs	r2, #2
 800128c:	4013      	ands	r3, r2
 800128e:	d004      	beq.n	800129a <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	0018      	movs	r0, r3
 8001294:	f7ff f942 	bl	800051c <HAL_CAN_TxMailbox0CompleteCallback>
 8001298:	e017      	b.n	80012ca <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	2204      	movs	r2, #4
 800129e:	4013      	ands	r3, r2
 80012a0:	d005      	beq.n	80012ae <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	2280      	movs	r2, #128	; 0x80
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	4313      	orrs	r3, r2
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
 80012ac:	e00d      	b.n	80012ca <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	2208      	movs	r2, #8
 80012b2:	4013      	ands	r3, r2
 80012b4:	d005      	beq.n	80012c2 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	2280      	movs	r2, #128	; 0x80
 80012ba:	0152      	lsls	r2, r2, #5
 80012bc:	4313      	orrs	r3, r2
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
 80012c0:	e003      	b.n	80012ca <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	0018      	movs	r0, r3
 80012c6:	f000 f975 	bl	80015b4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4013      	ands	r3, r2
 80012d2:	d028      	beq.n	8001326 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2280      	movs	r2, #128	; 0x80
 80012da:	0052      	lsls	r2, r2, #1
 80012dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4013      	ands	r3, r2
 80012e6:	d004      	beq.n	80012f2 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	0018      	movs	r0, r3
 80012ec:	f000 f952 	bl	8001594 <HAL_CAN_TxMailbox1CompleteCallback>
 80012f0:	e019      	b.n	8001326 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	4013      	ands	r3, r2
 80012fa:	d005      	beq.n	8001308 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	2280      	movs	r2, #128	; 0x80
 8001300:	0192      	lsls	r2, r2, #6
 8001302:	4313      	orrs	r3, r2
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
 8001306:	e00e      	b.n	8001326 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	4013      	ands	r3, r2
 8001310:	d005      	beq.n	800131e <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	2280      	movs	r2, #128	; 0x80
 8001316:	01d2      	lsls	r2, r2, #7
 8001318:	4313      	orrs	r3, r2
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
 800131c:	e003      	b.n	8001326 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	0018      	movs	r0, r3
 8001322:	f000 f94f 	bl	80015c4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	025b      	lsls	r3, r3, #9
 800132c:	4013      	ands	r3, r2
 800132e:	d028      	beq.n	8001382 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2280      	movs	r2, #128	; 0x80
 8001336:	0252      	lsls	r2, r2, #9
 8001338:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	029b      	lsls	r3, r3, #10
 8001340:	4013      	ands	r3, r2
 8001342:	d004      	beq.n	800134e <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	0018      	movs	r0, r3
 8001348:	f000 f92c 	bl	80015a4 <HAL_CAN_TxMailbox2CompleteCallback>
 800134c:	e019      	b.n	8001382 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	02db      	lsls	r3, r3, #11
 8001354:	4013      	ands	r3, r2
 8001356:	d005      	beq.n	8001364 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	2280      	movs	r2, #128	; 0x80
 800135c:	0212      	lsls	r2, r2, #8
 800135e:	4313      	orrs	r3, r2
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
 8001362:	e00e      	b.n	8001382 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	2380      	movs	r3, #128	; 0x80
 8001368:	031b      	lsls	r3, r3, #12
 800136a:	4013      	ands	r3, r2
 800136c:	d005      	beq.n	800137a <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	2280      	movs	r2, #128	; 0x80
 8001372:	0252      	lsls	r2, r2, #9
 8001374:	4313      	orrs	r3, r2
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
 8001378:	e003      	b.n	8001382 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	0018      	movs	r0, r3
 800137e:	f000 f929 	bl	80015d4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	2208      	movs	r2, #8
 8001386:	4013      	ands	r3, r2
 8001388:	d00c      	beq.n	80013a4 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	2210      	movs	r2, #16
 800138e:	4013      	ands	r3, r2
 8001390:	d008      	beq.n	80013a4 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	2280      	movs	r2, #128	; 0x80
 8001396:	0092      	lsls	r2, r2, #2
 8001398:	4313      	orrs	r3, r2
 800139a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2210      	movs	r2, #16
 80013a2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	2204      	movs	r2, #4
 80013a8:	4013      	ands	r3, r2
 80013aa:	d00b      	beq.n	80013c4 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	2208      	movs	r2, #8
 80013b0:	4013      	ands	r3, r2
 80013b2:	d007      	beq.n	80013c4 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2208      	movs	r2, #8
 80013ba:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	0018      	movs	r0, r3
 80013c0:	f000 f910 	bl	80015e4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80013c4:	6a3b      	ldr	r3, [r7, #32]
 80013c6:	2202      	movs	r2, #2
 80013c8:	4013      	ands	r3, r2
 80013ca:	d009      	beq.n	80013e0 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2203      	movs	r2, #3
 80013d4:	4013      	ands	r3, r2
 80013d6:	d003      	beq.n	80013e0 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	0018      	movs	r0, r3
 80013dc:	f7ff f8a6 	bl	800052c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80013e0:	6a3b      	ldr	r3, [r7, #32]
 80013e2:	2240      	movs	r2, #64	; 0x40
 80013e4:	4013      	ands	r3, r2
 80013e6:	d00c      	beq.n	8001402 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	2210      	movs	r2, #16
 80013ec:	4013      	ands	r3, r2
 80013ee:	d008      	beq.n	8001402 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80013f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f2:	2280      	movs	r2, #128	; 0x80
 80013f4:	00d2      	lsls	r2, r2, #3
 80013f6:	4313      	orrs	r3, r2
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2210      	movs	r2, #16
 8001400:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	2220      	movs	r2, #32
 8001406:	4013      	ands	r3, r2
 8001408:	d00b      	beq.n	8001422 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	2208      	movs	r2, #8
 800140e:	4013      	ands	r3, r2
 8001410:	d007      	beq.n	8001422 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2208      	movs	r2, #8
 8001418:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	0018      	movs	r0, r3
 800141e:	f000 f8f1 	bl	8001604 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001422:	6a3b      	ldr	r3, [r7, #32]
 8001424:	2210      	movs	r2, #16
 8001426:	4013      	ands	r3, r2
 8001428:	d009      	beq.n	800143e <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	2203      	movs	r2, #3
 8001432:	4013      	ands	r3, r2
 8001434:	d003      	beq.n	800143e <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	0018      	movs	r0, r3
 800143a:	f000 f8db 	bl	80015f4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800143e:	6a3a      	ldr	r2, [r7, #32]
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	029b      	lsls	r3, r3, #10
 8001444:	4013      	ands	r3, r2
 8001446:	d00b      	beq.n	8001460 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	2210      	movs	r2, #16
 800144c:	4013      	ands	r3, r2
 800144e:	d007      	beq.n	8001460 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2210      	movs	r2, #16
 8001456:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	0018      	movs	r0, r3
 800145c:	f000 f8da 	bl	8001614 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001460:	6a3a      	ldr	r2, [r7, #32]
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	025b      	lsls	r3, r3, #9
 8001466:	4013      	ands	r3, r2
 8001468:	d00b      	beq.n	8001482 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	2208      	movs	r2, #8
 800146e:	4013      	ands	r3, r2
 8001470:	d007      	beq.n	8001482 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2208      	movs	r2, #8
 8001478:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	0018      	movs	r0, r3
 800147e:	f000 f8d1 	bl	8001624 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001482:	6a3a      	ldr	r2, [r7, #32]
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	4013      	ands	r3, r2
 800148a:	d100      	bne.n	800148e <HAL_CAN_IRQHandler+0x25c>
 800148c:	e071      	b.n	8001572 <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	2204      	movs	r2, #4
 8001492:	4013      	ands	r3, r2
 8001494:	d100      	bne.n	8001498 <HAL_CAN_IRQHandler+0x266>
 8001496:	e068      	b.n	800156a <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001498:	6a3a      	ldr	r2, [r7, #32]
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4013      	ands	r3, r2
 80014a0:	d007      	beq.n	80014b2 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2201      	movs	r2, #1
 80014a6:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014a8:	d003      	beq.n	80014b2 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	2201      	movs	r2, #1
 80014ae:	4313      	orrs	r3, r2
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014b2:	6a3a      	ldr	r2, [r7, #32]
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4013      	ands	r3, r2
 80014ba:	d007      	beq.n	80014cc <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2202      	movs	r2, #2
 80014c0:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014c2:	d003      	beq.n	80014cc <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	2202      	movs	r2, #2
 80014c8:	4313      	orrs	r3, r2
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014cc:	6a3a      	ldr	r2, [r7, #32]
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	4013      	ands	r3, r2
 80014d4:	d007      	beq.n	80014e6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2204      	movs	r2, #4
 80014da:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014dc:	d003      	beq.n	80014e6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	2204      	movs	r2, #4
 80014e2:	4313      	orrs	r3, r2
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014e6:	6a3a      	ldr	r2, [r7, #32]
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	4013      	ands	r3, r2
 80014ee:	d03c      	beq.n	800156a <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2270      	movs	r2, #112	; 0x70
 80014f4:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014f6:	d038      	beq.n	800156a <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2270      	movs	r2, #112	; 0x70
 80014fc:	4013      	ands	r3, r2
 80014fe:	2b30      	cmp	r3, #48	; 0x30
 8001500:	d016      	beq.n	8001530 <HAL_CAN_IRQHandler+0x2fe>
 8001502:	d804      	bhi.n	800150e <HAL_CAN_IRQHandler+0x2dc>
 8001504:	2b10      	cmp	r3, #16
 8001506:	d009      	beq.n	800151c <HAL_CAN_IRQHandler+0x2ea>
 8001508:	2b20      	cmp	r3, #32
 800150a:	d00c      	beq.n	8001526 <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800150c:	e025      	b.n	800155a <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 800150e:	2b50      	cmp	r3, #80	; 0x50
 8001510:	d018      	beq.n	8001544 <HAL_CAN_IRQHandler+0x312>
 8001512:	2b60      	cmp	r3, #96	; 0x60
 8001514:	d01b      	beq.n	800154e <HAL_CAN_IRQHandler+0x31c>
 8001516:	2b40      	cmp	r3, #64	; 0x40
 8001518:	d00f      	beq.n	800153a <HAL_CAN_IRQHandler+0x308>
            break;
 800151a:	e01e      	b.n	800155a <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	2208      	movs	r2, #8
 8001520:	4313      	orrs	r3, r2
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001524:	e019      	b.n	800155a <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	2210      	movs	r2, #16
 800152a:	4313      	orrs	r3, r2
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800152e:	e014      	b.n	800155a <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	2220      	movs	r2, #32
 8001534:	4313      	orrs	r3, r2
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001538:	e00f      	b.n	800155a <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	2240      	movs	r2, #64	; 0x40
 800153e:	4313      	orrs	r3, r2
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001542:	e00a      	b.n	800155a <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	2280      	movs	r2, #128	; 0x80
 8001548:	4313      	orrs	r3, r2
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800154c:	e005      	b.n	800155a <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	2280      	movs	r2, #128	; 0x80
 8001552:	0052      	lsls	r2, r2, #1
 8001554:	4313      	orrs	r3, r2
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001558:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	699a      	ldr	r2, [r3, #24]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2170      	movs	r1, #112	; 0x70
 8001566:	438a      	bics	r2, r1
 8001568:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2204      	movs	r2, #4
 8001570:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	2b00      	cmp	r3, #0
 8001576:	d009      	beq.n	800158c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	0018      	movs	r0, r3
 8001588:	f000 f854 	bl	8001634 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800158c:	46c0      	nop			; (mov r8, r8)
 800158e:	46bd      	mov	sp, r7
 8001590:	b00a      	add	sp, #40	; 0x28
 8001592:	bd80      	pop	{r7, pc}

08001594 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800159c:	46c0      	nop			; (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	b002      	add	sp, #8
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80015ac:	46c0      	nop			; (mov r8, r8)
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b002      	add	sp, #8
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80015bc:	46c0      	nop			; (mov r8, r8)
 80015be:	46bd      	mov	sp, r7
 80015c0:	b002      	add	sp, #8
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80015cc:	46c0      	nop			; (mov r8, r8)
 80015ce:	46bd      	mov	sp, r7
 80015d0:	b002      	add	sp, #8
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80015dc:	46c0      	nop			; (mov r8, r8)
 80015de:	46bd      	mov	sp, r7
 80015e0:	b002      	add	sp, #8
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80015ec:	46c0      	nop			; (mov r8, r8)
 80015ee:	46bd      	mov	sp, r7
 80015f0:	b002      	add	sp, #8
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80015fc:	46c0      	nop			; (mov r8, r8)
 80015fe:	46bd      	mov	sp, r7
 8001600:	b002      	add	sp, #8
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800160c:	46c0      	nop			; (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	b002      	add	sp, #8
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800161c:	46c0      	nop			; (mov r8, r8)
 800161e:	46bd      	mov	sp, r7
 8001620:	b002      	add	sp, #8
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800162c:	46c0      	nop			; (mov r8, r8)
 800162e:	46bd      	mov	sp, r7
 8001630:	b002      	add	sp, #8
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800163c:	46c0      	nop			; (mov r8, r8)
 800163e:	46bd      	mov	sp, r7
 8001640:	b002      	add	sp, #8
 8001642:	bd80      	pop	{r7, pc}

08001644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	0002      	movs	r2, r0
 800164c:	1dfb      	adds	r3, r7, #7
 800164e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001650:	1dfb      	adds	r3, r7, #7
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b7f      	cmp	r3, #127	; 0x7f
 8001656:	d809      	bhi.n	800166c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001658:	1dfb      	adds	r3, r7, #7
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	001a      	movs	r2, r3
 800165e:	231f      	movs	r3, #31
 8001660:	401a      	ands	r2, r3
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <__NVIC_EnableIRQ+0x30>)
 8001664:	2101      	movs	r1, #1
 8001666:	4091      	lsls	r1, r2
 8001668:	000a      	movs	r2, r1
 800166a:	601a      	str	r2, [r3, #0]
  }
}
 800166c:	46c0      	nop			; (mov r8, r8)
 800166e:	46bd      	mov	sp, r7
 8001670:	b002      	add	sp, #8
 8001672:	bd80      	pop	{r7, pc}
 8001674:	e000e100 	.word	0xe000e100

08001678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001678:	b590      	push	{r4, r7, lr}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	0002      	movs	r2, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	1dfb      	adds	r3, r7, #7
 8001684:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001686:	1dfb      	adds	r3, r7, #7
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b7f      	cmp	r3, #127	; 0x7f
 800168c:	d828      	bhi.n	80016e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800168e:	4a2f      	ldr	r2, [pc, #188]	; (800174c <__NVIC_SetPriority+0xd4>)
 8001690:	1dfb      	adds	r3, r7, #7
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b25b      	sxtb	r3, r3
 8001696:	089b      	lsrs	r3, r3, #2
 8001698:	33c0      	adds	r3, #192	; 0xc0
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	589b      	ldr	r3, [r3, r2]
 800169e:	1dfa      	adds	r2, r7, #7
 80016a0:	7812      	ldrb	r2, [r2, #0]
 80016a2:	0011      	movs	r1, r2
 80016a4:	2203      	movs	r2, #3
 80016a6:	400a      	ands	r2, r1
 80016a8:	00d2      	lsls	r2, r2, #3
 80016aa:	21ff      	movs	r1, #255	; 0xff
 80016ac:	4091      	lsls	r1, r2
 80016ae:	000a      	movs	r2, r1
 80016b0:	43d2      	mvns	r2, r2
 80016b2:	401a      	ands	r2, r3
 80016b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	019b      	lsls	r3, r3, #6
 80016ba:	22ff      	movs	r2, #255	; 0xff
 80016bc:	401a      	ands	r2, r3
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	0018      	movs	r0, r3
 80016c4:	2303      	movs	r3, #3
 80016c6:	4003      	ands	r3, r0
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016cc:	481f      	ldr	r0, [pc, #124]	; (800174c <__NVIC_SetPriority+0xd4>)
 80016ce:	1dfb      	adds	r3, r7, #7
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	b25b      	sxtb	r3, r3
 80016d4:	089b      	lsrs	r3, r3, #2
 80016d6:	430a      	orrs	r2, r1
 80016d8:	33c0      	adds	r3, #192	; 0xc0
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016de:	e031      	b.n	8001744 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016e0:	4a1b      	ldr	r2, [pc, #108]	; (8001750 <__NVIC_SetPriority+0xd8>)
 80016e2:	1dfb      	adds	r3, r7, #7
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	0019      	movs	r1, r3
 80016e8:	230f      	movs	r3, #15
 80016ea:	400b      	ands	r3, r1
 80016ec:	3b08      	subs	r3, #8
 80016ee:	089b      	lsrs	r3, r3, #2
 80016f0:	3306      	adds	r3, #6
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	18d3      	adds	r3, r2, r3
 80016f6:	3304      	adds	r3, #4
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	1dfa      	adds	r2, r7, #7
 80016fc:	7812      	ldrb	r2, [r2, #0]
 80016fe:	0011      	movs	r1, r2
 8001700:	2203      	movs	r2, #3
 8001702:	400a      	ands	r2, r1
 8001704:	00d2      	lsls	r2, r2, #3
 8001706:	21ff      	movs	r1, #255	; 0xff
 8001708:	4091      	lsls	r1, r2
 800170a:	000a      	movs	r2, r1
 800170c:	43d2      	mvns	r2, r2
 800170e:	401a      	ands	r2, r3
 8001710:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	019b      	lsls	r3, r3, #6
 8001716:	22ff      	movs	r2, #255	; 0xff
 8001718:	401a      	ands	r2, r3
 800171a:	1dfb      	adds	r3, r7, #7
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	0018      	movs	r0, r3
 8001720:	2303      	movs	r3, #3
 8001722:	4003      	ands	r3, r0
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001728:	4809      	ldr	r0, [pc, #36]	; (8001750 <__NVIC_SetPriority+0xd8>)
 800172a:	1dfb      	adds	r3, r7, #7
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	001c      	movs	r4, r3
 8001730:	230f      	movs	r3, #15
 8001732:	4023      	ands	r3, r4
 8001734:	3b08      	subs	r3, #8
 8001736:	089b      	lsrs	r3, r3, #2
 8001738:	430a      	orrs	r2, r1
 800173a:	3306      	adds	r3, #6
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	18c3      	adds	r3, r0, r3
 8001740:	3304      	adds	r3, #4
 8001742:	601a      	str	r2, [r3, #0]
}
 8001744:	46c0      	nop			; (mov r8, r8)
 8001746:	46bd      	mov	sp, r7
 8001748:	b003      	add	sp, #12
 800174a:	bd90      	pop	{r4, r7, pc}
 800174c:	e000e100 	.word	0xe000e100
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	4a0c      	ldr	r2, [pc, #48]	; (8001794 <SysTick_Config+0x40>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d901      	bls.n	800176a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001766:	2301      	movs	r3, #1
 8001768:	e010      	b.n	800178c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <SysTick_Config+0x44>)
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	3a01      	subs	r2, #1
 8001770:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001772:	2301      	movs	r3, #1
 8001774:	425b      	negs	r3, r3
 8001776:	2103      	movs	r1, #3
 8001778:	0018      	movs	r0, r3
 800177a:	f7ff ff7d 	bl	8001678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <SysTick_Config+0x44>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001784:	4b04      	ldr	r3, [pc, #16]	; (8001798 <SysTick_Config+0x44>)
 8001786:	2207      	movs	r2, #7
 8001788:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800178a:	2300      	movs	r3, #0
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b002      	add	sp, #8
 8001792:	bd80      	pop	{r7, pc}
 8001794:	00ffffff 	.word	0x00ffffff
 8001798:	e000e010 	.word	0xe000e010

0800179c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	210f      	movs	r1, #15
 80017a8:	187b      	adds	r3, r7, r1
 80017aa:	1c02      	adds	r2, r0, #0
 80017ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	187b      	adds	r3, r7, r1
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b25b      	sxtb	r3, r3
 80017b6:	0011      	movs	r1, r2
 80017b8:	0018      	movs	r0, r3
 80017ba:	f7ff ff5d 	bl	8001678 <__NVIC_SetPriority>
}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b004      	add	sp, #16
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	0002      	movs	r2, r0
 80017ce:	1dfb      	adds	r3, r7, #7
 80017d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d2:	1dfb      	adds	r3, r7, #7
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	b25b      	sxtb	r3, r3
 80017d8:	0018      	movs	r0, r3
 80017da:	f7ff ff33 	bl	8001644 <__NVIC_EnableIRQ>
}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b002      	add	sp, #8
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	0018      	movs	r0, r3
 80017f2:	f7ff ffaf 	bl	8001754 <SysTick_Config>
 80017f6:	0003      	movs	r3, r0
}
 80017f8:	0018      	movs	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b002      	add	sp, #8
 80017fe:	bd80      	pop	{r7, pc}

08001800 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001808:	230f      	movs	r3, #15
 800180a:	18fb      	adds	r3, r7, r3
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2221      	movs	r2, #33	; 0x21
 8001814:	5c9b      	ldrb	r3, [r3, r2]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d007      	beq.n	800182c <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2204      	movs	r2, #4
 8001820:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001822:	230f      	movs	r3, #15
 8001824:	18fb      	adds	r3, r7, r3
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]
 800182a:	e028      	b.n	800187e <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	210e      	movs	r1, #14
 8001838:	438a      	bics	r2, r1
 800183a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2101      	movs	r1, #1
 8001848:	438a      	bics	r2, r1
 800184a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001854:	2101      	movs	r1, #1
 8001856:	4091      	lsls	r1, r2
 8001858:	000a      	movs	r2, r1
 800185a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2221      	movs	r2, #33	; 0x21
 8001860:	2101      	movs	r1, #1
 8001862:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2220      	movs	r2, #32
 8001868:	2100      	movs	r1, #0
 800186a:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001870:	2b00      	cmp	r3, #0
 8001872:	d004      	beq.n	800187e <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	0010      	movs	r0, r2
 800187c:	4798      	blx	r3
    } 
  }
  return status;
 800187e:	230f      	movs	r3, #15
 8001880:	18fb      	adds	r3, r7, r3
 8001882:	781b      	ldrb	r3, [r3, #0]
}
 8001884:	0018      	movs	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	b004      	add	sp, #16
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189a:	e149      	b.n	8001b30 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2101      	movs	r1, #1
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	4091      	lsls	r1, r2
 80018a6:	000a      	movs	r2, r1
 80018a8:	4013      	ands	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d100      	bne.n	80018b4 <HAL_GPIO_Init+0x28>
 80018b2:	e13a      	b.n	8001b2a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x38>
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b12      	cmp	r3, #18
 80018c2:	d123      	bne.n	800190c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	08da      	lsrs	r2, r3, #3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3208      	adds	r2, #8
 80018cc:	0092      	lsls	r2, r2, #2
 80018ce:	58d3      	ldr	r3, [r2, r3]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	2207      	movs	r2, #7
 80018d6:	4013      	ands	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	220f      	movs	r2, #15
 80018dc:	409a      	lsls	r2, r3
 80018de:	0013      	movs	r3, r2
 80018e0:	43da      	mvns	r2, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	2107      	movs	r1, #7
 80018f0:	400b      	ands	r3, r1
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	409a      	lsls	r2, r3
 80018f6:	0013      	movs	r3, r2
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	08da      	lsrs	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3208      	adds	r2, #8
 8001906:	0092      	lsls	r2, r2, #2
 8001908:	6939      	ldr	r1, [r7, #16]
 800190a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	2203      	movs	r2, #3
 8001918:	409a      	lsls	r2, r3
 800191a:	0013      	movs	r3, r2
 800191c:	43da      	mvns	r2, r3
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2203      	movs	r2, #3
 800192a:	401a      	ands	r2, r3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	409a      	lsls	r2, r3
 8001932:	0013      	movs	r3, r2
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d00b      	beq.n	8001960 <HAL_GPIO_Init+0xd4>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d007      	beq.n	8001960 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001954:	2b11      	cmp	r3, #17
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b12      	cmp	r3, #18
 800195e:	d130      	bne.n	80019c2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	2203      	movs	r2, #3
 800196c:	409a      	lsls	r2, r3
 800196e:	0013      	movs	r3, r2
 8001970:	43da      	mvns	r2, r3
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	409a      	lsls	r2, r3
 8001982:	0013      	movs	r3, r2
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001996:	2201      	movs	r2, #1
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	409a      	lsls	r2, r3
 800199c:	0013      	movs	r3, r2
 800199e:	43da      	mvns	r2, r3
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	091b      	lsrs	r3, r3, #4
 80019ac:	2201      	movs	r2, #1
 80019ae:	401a      	ands	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	409a      	lsls	r2, r3
 80019b4:	0013      	movs	r3, r2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2203      	movs	r2, #3
 80019ce:	409a      	lsls	r2, r3
 80019d0:	0013      	movs	r3, r2
 80019d2:	43da      	mvns	r2, r3
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	409a      	lsls	r2, r3
 80019e4:	0013      	movs	r3, r2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	055b      	lsls	r3, r3, #21
 80019fa:	4013      	ands	r3, r2
 80019fc:	d100      	bne.n	8001a00 <HAL_GPIO_Init+0x174>
 80019fe:	e094      	b.n	8001b2a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a00:	4b51      	ldr	r3, [pc, #324]	; (8001b48 <HAL_GPIO_Init+0x2bc>)
 8001a02:	699a      	ldr	r2, [r3, #24]
 8001a04:	4b50      	ldr	r3, [pc, #320]	; (8001b48 <HAL_GPIO_Init+0x2bc>)
 8001a06:	2101      	movs	r1, #1
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	619a      	str	r2, [r3, #24]
 8001a0c:	4b4e      	ldr	r3, [pc, #312]	; (8001b48 <HAL_GPIO_Init+0x2bc>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	2201      	movs	r2, #1
 8001a12:	4013      	ands	r3, r2
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a18:	4a4c      	ldr	r2, [pc, #304]	; (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	089b      	lsrs	r3, r3, #2
 8001a1e:	3302      	adds	r3, #2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	589b      	ldr	r3, [r3, r2]
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2203      	movs	r2, #3
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	220f      	movs	r2, #15
 8001a30:	409a      	lsls	r2, r3
 8001a32:	0013      	movs	r3, r2
 8001a34:	43da      	mvns	r2, r3
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	2390      	movs	r3, #144	; 0x90
 8001a40:	05db      	lsls	r3, r3, #23
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d00d      	beq.n	8001a62 <HAL_GPIO_Init+0x1d6>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a41      	ldr	r2, [pc, #260]	; (8001b50 <HAL_GPIO_Init+0x2c4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d007      	beq.n	8001a5e <HAL_GPIO_Init+0x1d2>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a40      	ldr	r2, [pc, #256]	; (8001b54 <HAL_GPIO_Init+0x2c8>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d101      	bne.n	8001a5a <HAL_GPIO_Init+0x1ce>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e004      	b.n	8001a64 <HAL_GPIO_Init+0x1d8>
 8001a5a:	2305      	movs	r3, #5
 8001a5c:	e002      	b.n	8001a64 <HAL_GPIO_Init+0x1d8>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <HAL_GPIO_Init+0x1d8>
 8001a62:	2300      	movs	r3, #0
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	2103      	movs	r1, #3
 8001a68:	400a      	ands	r2, r1
 8001a6a:	0092      	lsls	r2, r2, #2
 8001a6c:	4093      	lsls	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a74:	4935      	ldr	r1, [pc, #212]	; (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	089b      	lsrs	r3, r3, #2
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a82:	4b35      	ldr	r3, [pc, #212]	; (8001b58 <HAL_GPIO_Init+0x2cc>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	2380      	movs	r3, #128	; 0x80
 8001a98:	025b      	lsls	r3, r3, #9
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001aa6:	4b2c      	ldr	r3, [pc, #176]	; (8001b58 <HAL_GPIO_Init+0x2cc>)
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001aac:	4b2a      	ldr	r3, [pc, #168]	; (8001b58 <HAL_GPIO_Init+0x2cc>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	43da      	mvns	r2, r3
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	029b      	lsls	r3, r3, #10
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ad0:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <HAL_GPIO_Init+0x2cc>)
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <HAL_GPIO_Init+0x2cc>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	43da      	mvns	r2, r3
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	035b      	lsls	r3, r3, #13
 8001aee:	4013      	ands	r3, r2
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <HAL_GPIO_Init+0x2cc>)
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <HAL_GPIO_Init+0x2cc>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	43da      	mvns	r2, r3
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	2380      	movs	r3, #128	; 0x80
 8001b16:	039b      	lsls	r3, r3, #14
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <HAL_GPIO_Init+0x2cc>)
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	40da      	lsrs	r2, r3
 8001b38:	1e13      	subs	r3, r2, #0
 8001b3a:	d000      	beq.n	8001b3e <HAL_GPIO_Init+0x2b2>
 8001b3c:	e6ae      	b.n	800189c <HAL_GPIO_Init+0x10>
  } 
}
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b006      	add	sp, #24
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40010000 	.word	0x40010000
 8001b50:	48000400 	.word	0x48000400
 8001b54:	48000800 	.word	0x48000800
 8001b58:	40010400 	.word	0x40010400

08001b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	0008      	movs	r0, r1
 8001b66:	0011      	movs	r1, r2
 8001b68:	1cbb      	adds	r3, r7, #2
 8001b6a:	1c02      	adds	r2, r0, #0
 8001b6c:	801a      	strh	r2, [r3, #0]
 8001b6e:	1c7b      	adds	r3, r7, #1
 8001b70:	1c0a      	adds	r2, r1, #0
 8001b72:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b74:	1c7b      	adds	r3, r7, #1
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d004      	beq.n	8001b86 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b7c:	1cbb      	adds	r3, r7, #2
 8001b7e:	881a      	ldrh	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b84:	e003      	b.n	8001b8e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b86:	1cbb      	adds	r3, r7, #2
 8001b88:	881a      	ldrh	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b002      	add	sp, #8
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	000a      	movs	r2, r1
 8001ba0:	1cbb      	adds	r3, r7, #2
 8001ba2:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	1cba      	adds	r2, r7, #2
 8001baa:	8812      	ldrh	r2, [r2, #0]
 8001bac:	4013      	ands	r3, r2
 8001bae:	d005      	beq.n	8001bbc <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001bb0:	1cbb      	adds	r3, r7, #2
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	041a      	lsls	r2, r3, #16
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001bba:	e003      	b.n	8001bc4 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bbc:	1cbb      	adds	r3, r7, #2
 8001bbe:	881a      	ldrh	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	619a      	str	r2, [r3, #24]
}
 8001bc4:	46c0      	nop			; (mov r8, r8)
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	b002      	add	sp, #8
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d102      	bne.n	8001be0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	f000 fb76 	bl	80022cc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2201      	movs	r2, #1
 8001be6:	4013      	ands	r3, r2
 8001be8:	d100      	bne.n	8001bec <HAL_RCC_OscConfig+0x20>
 8001bea:	e08e      	b.n	8001d0a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bec:	4bc5      	ldr	r3, [pc, #788]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	220c      	movs	r2, #12
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d00e      	beq.n	8001c16 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bf8:	4bc2      	ldr	r3, [pc, #776]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	220c      	movs	r2, #12
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d117      	bne.n	8001c34 <HAL_RCC_OscConfig+0x68>
 8001c04:	4bbf      	ldr	r3, [pc, #764]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	23c0      	movs	r3, #192	; 0xc0
 8001c0a:	025b      	lsls	r3, r3, #9
 8001c0c:	401a      	ands	r2, r3
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	025b      	lsls	r3, r3, #9
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d10e      	bne.n	8001c34 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c16:	4bbb      	ldr	r3, [pc, #748]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	029b      	lsls	r3, r3, #10
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d100      	bne.n	8001c24 <HAL_RCC_OscConfig+0x58>
 8001c22:	e071      	b.n	8001d08 <HAL_RCC_OscConfig+0x13c>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d000      	beq.n	8001c2e <HAL_RCC_OscConfig+0x62>
 8001c2c:	e06c      	b.n	8001d08 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f000 fb4c 	bl	80022cc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d107      	bne.n	8001c4c <HAL_RCC_OscConfig+0x80>
 8001c3c:	4bb1      	ldr	r3, [pc, #708]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4bb0      	ldr	r3, [pc, #704]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c42:	2180      	movs	r1, #128	; 0x80
 8001c44:	0249      	lsls	r1, r1, #9
 8001c46:	430a      	orrs	r2, r1
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	e02f      	b.n	8001cac <HAL_RCC_OscConfig+0xe0>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10c      	bne.n	8001c6e <HAL_RCC_OscConfig+0xa2>
 8001c54:	4bab      	ldr	r3, [pc, #684]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4baa      	ldr	r3, [pc, #680]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c5a:	49ab      	ldr	r1, [pc, #684]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001c5c:	400a      	ands	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	4ba8      	ldr	r3, [pc, #672]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4ba7      	ldr	r3, [pc, #668]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c66:	49a9      	ldr	r1, [pc, #676]	; (8001f0c <HAL_RCC_OscConfig+0x340>)
 8001c68:	400a      	ands	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	e01e      	b.n	8001cac <HAL_RCC_OscConfig+0xe0>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b05      	cmp	r3, #5
 8001c74:	d10e      	bne.n	8001c94 <HAL_RCC_OscConfig+0xc8>
 8001c76:	4ba3      	ldr	r3, [pc, #652]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	4ba2      	ldr	r3, [pc, #648]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c7c:	2180      	movs	r1, #128	; 0x80
 8001c7e:	02c9      	lsls	r1, r1, #11
 8001c80:	430a      	orrs	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	4b9f      	ldr	r3, [pc, #636]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b9e      	ldr	r3, [pc, #632]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c8a:	2180      	movs	r1, #128	; 0x80
 8001c8c:	0249      	lsls	r1, r1, #9
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	e00b      	b.n	8001cac <HAL_RCC_OscConfig+0xe0>
 8001c94:	4b9b      	ldr	r3, [pc, #620]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b9a      	ldr	r3, [pc, #616]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001c9a:	499b      	ldr	r1, [pc, #620]	; (8001f08 <HAL_RCC_OscConfig+0x33c>)
 8001c9c:	400a      	ands	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	4b98      	ldr	r3, [pc, #608]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b97      	ldr	r3, [pc, #604]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001ca6:	4999      	ldr	r1, [pc, #612]	; (8001f0c <HAL_RCC_OscConfig+0x340>)
 8001ca8:	400a      	ands	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d014      	beq.n	8001cde <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb4:	f7fe fe36 	bl	8000924 <HAL_GetTick>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cbe:	f7fe fe31 	bl	8000924 <HAL_GetTick>
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b64      	cmp	r3, #100	; 0x64
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e2fd      	b.n	80022cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd0:	4b8c      	ldr	r3, [pc, #560]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	029b      	lsls	r3, r3, #10
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0xf2>
 8001cdc:	e015      	b.n	8001d0a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cde:	f7fe fe21 	bl	8000924 <HAL_GetTick>
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7fe fe1c 	bl	8000924 <HAL_GetTick>
 8001cec:	0002      	movs	r2, r0
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e2e8      	b.n	80022cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfa:	4b82      	ldr	r3, [pc, #520]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	029b      	lsls	r3, r3, #10
 8001d02:	4013      	ands	r3, r2
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x11c>
 8001d06:	e000      	b.n	8001d0a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d08:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	4013      	ands	r3, r2
 8001d12:	d100      	bne.n	8001d16 <HAL_RCC_OscConfig+0x14a>
 8001d14:	e06c      	b.n	8001df0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d16:	4b7b      	ldr	r3, [pc, #492]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d00e      	beq.n	8001d3e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d20:	4b78      	ldr	r3, [pc, #480]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	220c      	movs	r2, #12
 8001d26:	4013      	ands	r3, r2
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d11f      	bne.n	8001d6c <HAL_RCC_OscConfig+0x1a0>
 8001d2c:	4b75      	ldr	r3, [pc, #468]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	23c0      	movs	r3, #192	; 0xc0
 8001d32:	025b      	lsls	r3, r3, #9
 8001d34:	401a      	ands	r2, r3
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	021b      	lsls	r3, r3, #8
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d116      	bne.n	8001d6c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3e:	4b71      	ldr	r3, [pc, #452]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2202      	movs	r2, #2
 8001d44:	4013      	ands	r3, r2
 8001d46:	d005      	beq.n	8001d54 <HAL_RCC_OscConfig+0x188>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e2bb      	b.n	80022cc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d54:	4b6b      	ldr	r3, [pc, #428]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	22f8      	movs	r2, #248	; 0xf8
 8001d5a:	4393      	bics	r3, r2
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	00da      	lsls	r2, r3, #3
 8001d64:	4b67      	ldr	r3, [pc, #412]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001d66:	430a      	orrs	r2, r1
 8001d68:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6a:	e041      	b.n	8001df0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d024      	beq.n	8001dbe <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d74:	4b63      	ldr	r3, [pc, #396]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b62      	ldr	r3, [pc, #392]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7fe fdd0 	bl	8000924 <HAL_GetTick>
 8001d84:	0003      	movs	r3, r0
 8001d86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d8a:	f7fe fdcb 	bl	8000924 <HAL_GetTick>
 8001d8e:	0002      	movs	r2, r0
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e297      	b.n	80022cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9c:	4b59      	ldr	r3, [pc, #356]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2202      	movs	r2, #2
 8001da2:	4013      	ands	r3, r2
 8001da4:	d0f1      	beq.n	8001d8a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da6:	4b57      	ldr	r3, [pc, #348]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	22f8      	movs	r2, #248	; 0xf8
 8001dac:	4393      	bics	r3, r2
 8001dae:	0019      	movs	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	00da      	lsls	r2, r3, #3
 8001db6:	4b53      	ldr	r3, [pc, #332]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001db8:	430a      	orrs	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	e018      	b.n	8001df0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dbe:	4b51      	ldr	r3, [pc, #324]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	4b50      	ldr	r3, [pc, #320]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	438a      	bics	r2, r1
 8001dc8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dca:	f7fe fdab 	bl	8000924 <HAL_GetTick>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd4:	f7fe fda6 	bl	8000924 <HAL_GetTick>
 8001dd8:	0002      	movs	r2, r0
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e272      	b.n	80022cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de6:	4b47      	ldr	r3, [pc, #284]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2202      	movs	r2, #2
 8001dec:	4013      	ands	r3, r2
 8001dee:	d1f1      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2208      	movs	r2, #8
 8001df6:	4013      	ands	r3, r2
 8001df8:	d036      	beq.n	8001e68 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d019      	beq.n	8001e36 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e02:	4b40      	ldr	r3, [pc, #256]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e06:	4b3f      	ldr	r3, [pc, #252]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e08:	2101      	movs	r1, #1
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0e:	f7fe fd89 	bl	8000924 <HAL_GetTick>
 8001e12:	0003      	movs	r3, r0
 8001e14:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e18:	f7fe fd84 	bl	8000924 <HAL_GetTick>
 8001e1c:	0002      	movs	r2, r0
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e250      	b.n	80022cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2a:	4b36      	ldr	r3, [pc, #216]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	2202      	movs	r2, #2
 8001e30:	4013      	ands	r3, r2
 8001e32:	d0f1      	beq.n	8001e18 <HAL_RCC_OscConfig+0x24c>
 8001e34:	e018      	b.n	8001e68 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e36:	4b33      	ldr	r3, [pc, #204]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e3a:	4b32      	ldr	r3, [pc, #200]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	438a      	bics	r2, r1
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e42:	f7fe fd6f 	bl	8000924 <HAL_GetTick>
 8001e46:	0003      	movs	r3, r0
 8001e48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e4c:	f7fe fd6a 	bl	8000924 <HAL_GetTick>
 8001e50:	0002      	movs	r2, r0
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e236      	b.n	80022cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5e:	4b29      	ldr	r3, [pc, #164]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	2202      	movs	r2, #2
 8001e64:	4013      	ands	r3, r2
 8001e66:	d1f1      	bne.n	8001e4c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2204      	movs	r2, #4
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d100      	bne.n	8001e74 <HAL_RCC_OscConfig+0x2a8>
 8001e72:	e0b5      	b.n	8001fe0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e74:	231f      	movs	r3, #31
 8001e76:	18fb      	adds	r3, r7, r3
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7c:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e7e:	69da      	ldr	r2, [r3, #28]
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	055b      	lsls	r3, r3, #21
 8001e84:	4013      	ands	r3, r2
 8001e86:	d111      	bne.n	8001eac <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e88:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e8a:	69da      	ldr	r2, [r3, #28]
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e8e:	2180      	movs	r1, #128	; 0x80
 8001e90:	0549      	lsls	r1, r1, #21
 8001e92:	430a      	orrs	r2, r1
 8001e94:	61da      	str	r2, [r3, #28]
 8001e96:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001e98:	69da      	ldr	r2, [r3, #28]
 8001e9a:	2380      	movs	r3, #128	; 0x80
 8001e9c:	055b      	lsls	r3, r3, #21
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ea4:	231f      	movs	r3, #31
 8001ea6:	18fb      	adds	r3, r7, r3
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <HAL_RCC_OscConfig+0x344>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d11a      	bne.n	8001eee <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eb8:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <HAL_RCC_OscConfig+0x344>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <HAL_RCC_OscConfig+0x344>)
 8001ebe:	2180      	movs	r1, #128	; 0x80
 8001ec0:	0049      	lsls	r1, r1, #1
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ec6:	f7fe fd2d 	bl	8000924 <HAL_GetTick>
 8001eca:	0003      	movs	r3, r0
 8001ecc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed0:	f7fe fd28 	bl	8000924 <HAL_GetTick>
 8001ed4:	0002      	movs	r2, r0
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	; 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e1f4      	b.n	80022cc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_RCC_OscConfig+0x344>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4013      	ands	r3, r2
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d10e      	bne.n	8001f14 <HAL_RCC_OscConfig+0x348>
 8001ef6:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001ef8:	6a1a      	ldr	r2, [r3, #32]
 8001efa:	4b02      	ldr	r3, [pc, #8]	; (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001efc:	2101      	movs	r1, #1
 8001efe:	430a      	orrs	r2, r1
 8001f00:	621a      	str	r2, [r3, #32]
 8001f02:	e035      	b.n	8001f70 <HAL_RCC_OscConfig+0x3a4>
 8001f04:	40021000 	.word	0x40021000
 8001f08:	fffeffff 	.word	0xfffeffff
 8001f0c:	fffbffff 	.word	0xfffbffff
 8001f10:	40007000 	.word	0x40007000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10c      	bne.n	8001f36 <HAL_RCC_OscConfig+0x36a>
 8001f1c:	4bca      	ldr	r3, [pc, #808]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8001f1e:	6a1a      	ldr	r2, [r3, #32]
 8001f20:	4bc9      	ldr	r3, [pc, #804]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8001f22:	2101      	movs	r1, #1
 8001f24:	438a      	bics	r2, r1
 8001f26:	621a      	str	r2, [r3, #32]
 8001f28:	4bc7      	ldr	r3, [pc, #796]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8001f2a:	6a1a      	ldr	r2, [r3, #32]
 8001f2c:	4bc6      	ldr	r3, [pc, #792]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8001f2e:	2104      	movs	r1, #4
 8001f30:	438a      	bics	r2, r1
 8001f32:	621a      	str	r2, [r3, #32]
 8001f34:	e01c      	b.n	8001f70 <HAL_RCC_OscConfig+0x3a4>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b05      	cmp	r3, #5
 8001f3c:	d10c      	bne.n	8001f58 <HAL_RCC_OscConfig+0x38c>
 8001f3e:	4bc2      	ldr	r3, [pc, #776]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8001f40:	6a1a      	ldr	r2, [r3, #32]
 8001f42:	4bc1      	ldr	r3, [pc, #772]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8001f44:	2104      	movs	r1, #4
 8001f46:	430a      	orrs	r2, r1
 8001f48:	621a      	str	r2, [r3, #32]
 8001f4a:	4bbf      	ldr	r3, [pc, #764]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8001f4c:	6a1a      	ldr	r2, [r3, #32]
 8001f4e:	4bbe      	ldr	r3, [pc, #760]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8001f50:	2101      	movs	r1, #1
 8001f52:	430a      	orrs	r2, r1
 8001f54:	621a      	str	r2, [r3, #32]
 8001f56:	e00b      	b.n	8001f70 <HAL_RCC_OscConfig+0x3a4>
 8001f58:	4bbb      	ldr	r3, [pc, #748]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8001f5a:	6a1a      	ldr	r2, [r3, #32]
 8001f5c:	4bba      	ldr	r3, [pc, #744]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8001f5e:	2101      	movs	r1, #1
 8001f60:	438a      	bics	r2, r1
 8001f62:	621a      	str	r2, [r3, #32]
 8001f64:	4bb8      	ldr	r3, [pc, #736]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8001f66:	6a1a      	ldr	r2, [r3, #32]
 8001f68:	4bb7      	ldr	r3, [pc, #732]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8001f6a:	2104      	movs	r1, #4
 8001f6c:	438a      	bics	r2, r1
 8001f6e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d014      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f78:	f7fe fcd4 	bl	8000924 <HAL_GetTick>
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f80:	e009      	b.n	8001f96 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f7fe fccf 	bl	8000924 <HAL_GetTick>
 8001f86:	0002      	movs	r2, r0
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	4aaf      	ldr	r2, [pc, #700]	; (800224c <HAL_RCC_OscConfig+0x680>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e19a      	b.n	80022cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f96:	4bac      	ldr	r3, [pc, #688]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x3b6>
 8001fa0:	e013      	b.n	8001fca <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa2:	f7fe fcbf 	bl	8000924 <HAL_GetTick>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001faa:	e009      	b.n	8001fc0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fac:	f7fe fcba 	bl	8000924 <HAL_GetTick>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	4aa5      	ldr	r2, [pc, #660]	; (800224c <HAL_RCC_OscConfig+0x680>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e185      	b.n	80022cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc0:	4ba1      	ldr	r3, [pc, #644]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fca:	231f      	movs	r3, #31
 8001fcc:	18fb      	adds	r3, r7, r3
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d105      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd4:	4b9c      	ldr	r3, [pc, #624]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8001fd6:	69da      	ldr	r2, [r3, #28]
 8001fd8:	4b9b      	ldr	r3, [pc, #620]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8001fda:	499d      	ldr	r1, [pc, #628]	; (8002250 <HAL_RCC_OscConfig+0x684>)
 8001fdc:	400a      	ands	r2, r1
 8001fde:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2210      	movs	r2, #16
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d063      	beq.n	80020b2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d12a      	bne.n	8002048 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ff2:	4b95      	ldr	r3, [pc, #596]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8001ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ff6:	4b94      	ldr	r3, [pc, #592]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8001ff8:	2104      	movs	r1, #4
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001ffe:	4b92      	ldr	r3, [pc, #584]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8002000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002002:	4b91      	ldr	r3, [pc, #580]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8002004:	2101      	movs	r1, #1
 8002006:	430a      	orrs	r2, r1
 8002008:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200a:	f7fe fc8b 	bl	8000924 <HAL_GetTick>
 800200e:	0003      	movs	r3, r0
 8002010:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002014:	f7fe fc86 	bl	8000924 <HAL_GetTick>
 8002018:	0002      	movs	r2, r0
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e152      	b.n	80022cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002026:	4b88      	ldr	r3, [pc, #544]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8002028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800202a:	2202      	movs	r2, #2
 800202c:	4013      	ands	r3, r2
 800202e:	d0f1      	beq.n	8002014 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002030:	4b85      	ldr	r3, [pc, #532]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8002032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002034:	22f8      	movs	r2, #248	; 0xf8
 8002036:	4393      	bics	r3, r2
 8002038:	0019      	movs	r1, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	00da      	lsls	r2, r3, #3
 8002040:	4b81      	ldr	r3, [pc, #516]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8002042:	430a      	orrs	r2, r1
 8002044:	635a      	str	r2, [r3, #52]	; 0x34
 8002046:	e034      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	3305      	adds	r3, #5
 800204e:	d111      	bne.n	8002074 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002050:	4b7d      	ldr	r3, [pc, #500]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8002052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002054:	4b7c      	ldr	r3, [pc, #496]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8002056:	2104      	movs	r1, #4
 8002058:	438a      	bics	r2, r1
 800205a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800205c:	4b7a      	ldr	r3, [pc, #488]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 800205e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002060:	22f8      	movs	r2, #248	; 0xf8
 8002062:	4393      	bics	r3, r2
 8002064:	0019      	movs	r1, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	00da      	lsls	r2, r3, #3
 800206c:	4b76      	ldr	r3, [pc, #472]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 800206e:	430a      	orrs	r2, r1
 8002070:	635a      	str	r2, [r3, #52]	; 0x34
 8002072:	e01e      	b.n	80020b2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002074:	4b74      	ldr	r3, [pc, #464]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8002076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002078:	4b73      	ldr	r3, [pc, #460]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 800207a:	2104      	movs	r1, #4
 800207c:	430a      	orrs	r2, r1
 800207e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002080:	4b71      	ldr	r3, [pc, #452]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8002082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002084:	4b70      	ldr	r3, [pc, #448]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8002086:	2101      	movs	r1, #1
 8002088:	438a      	bics	r2, r1
 800208a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208c:	f7fe fc4a 	bl	8000924 <HAL_GetTick>
 8002090:	0003      	movs	r3, r0
 8002092:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002096:	f7fe fc45 	bl	8000924 <HAL_GetTick>
 800209a:	0002      	movs	r2, r0
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e111      	b.n	80022cc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020a8:	4b67      	ldr	r3, [pc, #412]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 80020aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ac:	2202      	movs	r2, #2
 80020ae:	4013      	ands	r3, r2
 80020b0:	d1f1      	bne.n	8002096 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2220      	movs	r2, #32
 80020b8:	4013      	ands	r3, r2
 80020ba:	d05c      	beq.n	8002176 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80020bc:	4b62      	ldr	r3, [pc, #392]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	220c      	movs	r2, #12
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b0c      	cmp	r3, #12
 80020c6:	d00e      	beq.n	80020e6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80020c8:	4b5f      	ldr	r3, [pc, #380]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	220c      	movs	r2, #12
 80020ce:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d114      	bne.n	80020fe <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80020d4:	4b5c      	ldr	r3, [pc, #368]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	23c0      	movs	r3, #192	; 0xc0
 80020da:	025b      	lsls	r3, r3, #9
 80020dc:	401a      	ands	r2, r3
 80020de:	23c0      	movs	r3, #192	; 0xc0
 80020e0:	025b      	lsls	r3, r3, #9
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d10b      	bne.n	80020fe <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80020e6:	4b58      	ldr	r3, [pc, #352]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 80020e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ea:	2380      	movs	r3, #128	; 0x80
 80020ec:	025b      	lsls	r3, r3, #9
 80020ee:	4013      	ands	r3, r2
 80020f0:	d040      	beq.n	8002174 <HAL_RCC_OscConfig+0x5a8>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d03c      	beq.n	8002174 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e0e6      	b.n	80022cc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d01b      	beq.n	800213e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002106:	4b50      	ldr	r3, [pc, #320]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8002108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800210a:	4b4f      	ldr	r3, [pc, #316]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 800210c:	2180      	movs	r1, #128	; 0x80
 800210e:	0249      	lsls	r1, r1, #9
 8002110:	430a      	orrs	r2, r1
 8002112:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7fe fc06 	bl	8000924 <HAL_GetTick>
 8002118:	0003      	movs	r3, r0
 800211a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800211e:	f7fe fc01 	bl	8000924 <HAL_GetTick>
 8002122:	0002      	movs	r2, r0
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e0cd      	b.n	80022cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002130:	4b45      	ldr	r3, [pc, #276]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8002132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	025b      	lsls	r3, r3, #9
 8002138:	4013      	ands	r3, r2
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x552>
 800213c:	e01b      	b.n	8002176 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800213e:	4b42      	ldr	r3, [pc, #264]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8002140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002142:	4b41      	ldr	r3, [pc, #260]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8002144:	4943      	ldr	r1, [pc, #268]	; (8002254 <HAL_RCC_OscConfig+0x688>)
 8002146:	400a      	ands	r2, r1
 8002148:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214a:	f7fe fbeb 	bl	8000924 <HAL_GetTick>
 800214e:	0003      	movs	r3, r0
 8002150:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002154:	f7fe fbe6 	bl	8000924 <HAL_GetTick>
 8002158:	0002      	movs	r2, r0
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e0b2      	b.n	80022cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002166:	4b38      	ldr	r3, [pc, #224]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8002168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	025b      	lsls	r3, r3, #9
 800216e:	4013      	ands	r3, r2
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x588>
 8002172:	e000      	b.n	8002176 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002174:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	2b00      	cmp	r3, #0
 800217c:	d100      	bne.n	8002180 <HAL_RCC_OscConfig+0x5b4>
 800217e:	e0a4      	b.n	80022ca <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002180:	4b31      	ldr	r3, [pc, #196]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	220c      	movs	r2, #12
 8002186:	4013      	ands	r3, r2
 8002188:	2b08      	cmp	r3, #8
 800218a:	d100      	bne.n	800218e <HAL_RCC_OscConfig+0x5c2>
 800218c:	e078      	b.n	8002280 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	2b02      	cmp	r3, #2
 8002194:	d14c      	bne.n	8002230 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002196:	4b2c      	ldr	r3, [pc, #176]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	4b2b      	ldr	r3, [pc, #172]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 800219c:	492e      	ldr	r1, [pc, #184]	; (8002258 <HAL_RCC_OscConfig+0x68c>)
 800219e:	400a      	ands	r2, r1
 80021a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a2:	f7fe fbbf 	bl	8000924 <HAL_GetTick>
 80021a6:	0003      	movs	r3, r0
 80021a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ac:	f7fe fbba 	bl	8000924 <HAL_GetTick>
 80021b0:	0002      	movs	r2, r0
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e086      	b.n	80022cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021be:	4b22      	ldr	r3, [pc, #136]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	049b      	lsls	r3, r3, #18
 80021c6:	4013      	ands	r3, r2
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ca:	4b1f      	ldr	r3, [pc, #124]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 80021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ce:	220f      	movs	r2, #15
 80021d0:	4393      	bics	r3, r2
 80021d2:	0019      	movs	r1, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021d8:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 80021da:	430a      	orrs	r2, r1
 80021dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80021de:	4b1a      	ldr	r3, [pc, #104]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4a1e      	ldr	r2, [pc, #120]	; (800225c <HAL_RCC_OscConfig+0x690>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	0019      	movs	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	431a      	orrs	r2, r3
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 80021f4:	430a      	orrs	r2, r1
 80021f6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f8:	4b13      	ldr	r3, [pc, #76]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 80021fe:	2180      	movs	r1, #128	; 0x80
 8002200:	0449      	lsls	r1, r1, #17
 8002202:	430a      	orrs	r2, r1
 8002204:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002206:	f7fe fb8d 	bl	8000924 <HAL_GetTick>
 800220a:	0003      	movs	r3, r0
 800220c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002210:	f7fe fb88 	bl	8000924 <HAL_GetTick>
 8002214:	0002      	movs	r2, r0
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e054      	b.n	80022cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	049b      	lsls	r3, r3, #18
 800222a:	4013      	ands	r3, r2
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0x644>
 800222e:	e04c      	b.n	80022ca <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b04      	ldr	r3, [pc, #16]	; (8002248 <HAL_RCC_OscConfig+0x67c>)
 8002236:	4908      	ldr	r1, [pc, #32]	; (8002258 <HAL_RCC_OscConfig+0x68c>)
 8002238:	400a      	ands	r2, r1
 800223a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7fe fb72 	bl	8000924 <HAL_GetTick>
 8002240:	0003      	movs	r3, r0
 8002242:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002244:	e015      	b.n	8002272 <HAL_RCC_OscConfig+0x6a6>
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	40021000 	.word	0x40021000
 800224c:	00001388 	.word	0x00001388
 8002250:	efffffff 	.word	0xefffffff
 8002254:	fffeffff 	.word	0xfffeffff
 8002258:	feffffff 	.word	0xfeffffff
 800225c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002260:	f7fe fb60 	bl	8000924 <HAL_GetTick>
 8002264:	0002      	movs	r2, r0
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e02c      	b.n	80022cc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002272:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <HAL_RCC_OscConfig+0x708>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	2380      	movs	r3, #128	; 0x80
 8002278:	049b      	lsls	r3, r3, #18
 800227a:	4013      	ands	r3, r2
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x694>
 800227e:	e024      	b.n	80022ca <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e01f      	b.n	80022cc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <HAL_RCC_OscConfig+0x708>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <HAL_RCC_OscConfig+0x708>)
 8002294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002296:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	23c0      	movs	r3, #192	; 0xc0
 800229c:	025b      	lsls	r3, r3, #9
 800229e:	401a      	ands	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d10e      	bne.n	80022c6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	220f      	movs	r2, #15
 80022ac:	401a      	ands	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	23f0      	movs	r3, #240	; 0xf0
 80022ba:	039b      	lsls	r3, r3, #14
 80022bc:	401a      	ands	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d001      	beq.n	80022ca <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	0018      	movs	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b008      	add	sp, #32
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40021000 	.word	0x40021000

080022d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0bf      	b.n	800246c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022ec:	4b61      	ldr	r3, [pc, #388]	; (8002474 <HAL_RCC_ClockConfig+0x19c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2201      	movs	r2, #1
 80022f2:	4013      	ands	r3, r2
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d911      	bls.n	800231e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fa:	4b5e      	ldr	r3, [pc, #376]	; (8002474 <HAL_RCC_ClockConfig+0x19c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2201      	movs	r2, #1
 8002300:	4393      	bics	r3, r2
 8002302:	0019      	movs	r1, r3
 8002304:	4b5b      	ldr	r3, [pc, #364]	; (8002474 <HAL_RCC_ClockConfig+0x19c>)
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800230c:	4b59      	ldr	r3, [pc, #356]	; (8002474 <HAL_RCC_ClockConfig+0x19c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2201      	movs	r2, #1
 8002312:	4013      	ands	r3, r2
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d001      	beq.n	800231e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e0a6      	b.n	800246c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2202      	movs	r2, #2
 8002324:	4013      	ands	r3, r2
 8002326:	d015      	beq.n	8002354 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2204      	movs	r2, #4
 800232e:	4013      	ands	r3, r2
 8002330:	d006      	beq.n	8002340 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002332:	4b51      	ldr	r3, [pc, #324]	; (8002478 <HAL_RCC_ClockConfig+0x1a0>)
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	4b50      	ldr	r3, [pc, #320]	; (8002478 <HAL_RCC_ClockConfig+0x1a0>)
 8002338:	21e0      	movs	r1, #224	; 0xe0
 800233a:	00c9      	lsls	r1, r1, #3
 800233c:	430a      	orrs	r2, r1
 800233e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002340:	4b4d      	ldr	r3, [pc, #308]	; (8002478 <HAL_RCC_ClockConfig+0x1a0>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	22f0      	movs	r2, #240	; 0xf0
 8002346:	4393      	bics	r3, r2
 8002348:	0019      	movs	r1, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	4b4a      	ldr	r3, [pc, #296]	; (8002478 <HAL_RCC_ClockConfig+0x1a0>)
 8002350:	430a      	orrs	r2, r1
 8002352:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2201      	movs	r2, #1
 800235a:	4013      	ands	r3, r2
 800235c:	d04c      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002366:	4b44      	ldr	r3, [pc, #272]	; (8002478 <HAL_RCC_ClockConfig+0x1a0>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	029b      	lsls	r3, r3, #10
 800236e:	4013      	ands	r3, r2
 8002370:	d120      	bne.n	80023b4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e07a      	b.n	800246c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d107      	bne.n	800238e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237e:	4b3e      	ldr	r3, [pc, #248]	; (8002478 <HAL_RCC_ClockConfig+0x1a0>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	2380      	movs	r3, #128	; 0x80
 8002384:	049b      	lsls	r3, r3, #18
 8002386:	4013      	ands	r3, r2
 8002388:	d114      	bne.n	80023b4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e06e      	b.n	800246c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b03      	cmp	r3, #3
 8002394:	d107      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002396:	4b38      	ldr	r3, [pc, #224]	; (8002478 <HAL_RCC_ClockConfig+0x1a0>)
 8002398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	025b      	lsls	r3, r3, #9
 800239e:	4013      	ands	r3, r2
 80023a0:	d108      	bne.n	80023b4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e062      	b.n	800246c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a6:	4b34      	ldr	r3, [pc, #208]	; (8002478 <HAL_RCC_ClockConfig+0x1a0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2202      	movs	r2, #2
 80023ac:	4013      	ands	r3, r2
 80023ae:	d101      	bne.n	80023b4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e05b      	b.n	800246c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023b4:	4b30      	ldr	r3, [pc, #192]	; (8002478 <HAL_RCC_ClockConfig+0x1a0>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2203      	movs	r2, #3
 80023ba:	4393      	bics	r3, r2
 80023bc:	0019      	movs	r1, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	4b2d      	ldr	r3, [pc, #180]	; (8002478 <HAL_RCC_ClockConfig+0x1a0>)
 80023c4:	430a      	orrs	r2, r1
 80023c6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c8:	f7fe faac 	bl	8000924 <HAL_GetTick>
 80023cc:	0003      	movs	r3, r0
 80023ce:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d0:	e009      	b.n	80023e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d2:	f7fe faa7 	bl	8000924 <HAL_GetTick>
 80023d6:	0002      	movs	r2, r0
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	4a27      	ldr	r2, [pc, #156]	; (800247c <HAL_RCC_ClockConfig+0x1a4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e042      	b.n	800246c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	4b24      	ldr	r3, [pc, #144]	; (8002478 <HAL_RCC_ClockConfig+0x1a0>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	220c      	movs	r2, #12
 80023ec:	401a      	ands	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d1ec      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023f8:	4b1e      	ldr	r3, [pc, #120]	; (8002474 <HAL_RCC_ClockConfig+0x19c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2201      	movs	r2, #1
 80023fe:	4013      	ands	r3, r2
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d211      	bcs.n	800242a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002406:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <HAL_RCC_ClockConfig+0x19c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2201      	movs	r2, #1
 800240c:	4393      	bics	r3, r2
 800240e:	0019      	movs	r1, r3
 8002410:	4b18      	ldr	r3, [pc, #96]	; (8002474 <HAL_RCC_ClockConfig+0x19c>)
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002418:	4b16      	ldr	r3, [pc, #88]	; (8002474 <HAL_RCC_ClockConfig+0x19c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2201      	movs	r2, #1
 800241e:	4013      	ands	r3, r2
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d001      	beq.n	800242a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e020      	b.n	800246c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2204      	movs	r2, #4
 8002430:	4013      	ands	r3, r2
 8002432:	d009      	beq.n	8002448 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002434:	4b10      	ldr	r3, [pc, #64]	; (8002478 <HAL_RCC_ClockConfig+0x1a0>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4a11      	ldr	r2, [pc, #68]	; (8002480 <HAL_RCC_ClockConfig+0x1a8>)
 800243a:	4013      	ands	r3, r2
 800243c:	0019      	movs	r1, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <HAL_RCC_ClockConfig+0x1a0>)
 8002444:	430a      	orrs	r2, r1
 8002446:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002448:	f000 f820 	bl	800248c <HAL_RCC_GetSysClockFreq>
 800244c:	0001      	movs	r1, r0
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <HAL_RCC_ClockConfig+0x1a0>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	091b      	lsrs	r3, r3, #4
 8002454:	220f      	movs	r2, #15
 8002456:	4013      	ands	r3, r2
 8002458:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <HAL_RCC_ClockConfig+0x1ac>)
 800245a:	5cd3      	ldrb	r3, [r2, r3]
 800245c:	000a      	movs	r2, r1
 800245e:	40da      	lsrs	r2, r3
 8002460:	4b09      	ldr	r3, [pc, #36]	; (8002488 <HAL_RCC_ClockConfig+0x1b0>)
 8002462:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002464:	2000      	movs	r0, #0
 8002466:	f7fe fa17 	bl	8000898 <HAL_InitTick>
  
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	0018      	movs	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	b004      	add	sp, #16
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40022000 	.word	0x40022000
 8002478:	40021000 	.word	0x40021000
 800247c:	00001388 	.word	0x00001388
 8002480:	fffff8ff 	.word	0xfffff8ff
 8002484:	08003680 	.word	0x08003680
 8002488:	20000000 	.word	0x20000000

0800248c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b08f      	sub	sp, #60	; 0x3c
 8002490:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002492:	2314      	movs	r3, #20
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	4a37      	ldr	r2, [pc, #220]	; (8002574 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002498:	ca13      	ldmia	r2!, {r0, r1, r4}
 800249a:	c313      	stmia	r3!, {r0, r1, r4}
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80024a0:	1d3b      	adds	r3, r7, #4
 80024a2:	4a35      	ldr	r2, [pc, #212]	; (8002578 <HAL_RCC_GetSysClockFreq+0xec>)
 80024a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80024a6:	c313      	stmia	r3!, {r0, r1, r4}
 80024a8:	6812      	ldr	r2, [r2, #0]
 80024aa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024b0:	2300      	movs	r3, #0
 80024b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80024b4:	2300      	movs	r3, #0
 80024b6:	637b      	str	r3, [r7, #52]	; 0x34
 80024b8:	2300      	movs	r3, #0
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80024c0:	4b2e      	ldr	r3, [pc, #184]	; (800257c <HAL_RCC_GetSysClockFreq+0xf0>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c8:	220c      	movs	r2, #12
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d006      	beq.n	80024de <HAL_RCC_GetSysClockFreq+0x52>
 80024d0:	2b0c      	cmp	r3, #12
 80024d2:	d043      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0xd0>
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d144      	bne.n	8002562 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024d8:	4b29      	ldr	r3, [pc, #164]	; (8002580 <HAL_RCC_GetSysClockFreq+0xf4>)
 80024da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024dc:	e044      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80024de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e0:	0c9b      	lsrs	r3, r3, #18
 80024e2:	220f      	movs	r2, #15
 80024e4:	4013      	ands	r3, r2
 80024e6:	2214      	movs	r2, #20
 80024e8:	18ba      	adds	r2, r7, r2
 80024ea:	5cd3      	ldrb	r3, [r2, r3]
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80024ee:	4b23      	ldr	r3, [pc, #140]	; (800257c <HAL_RCC_GetSysClockFreq+0xf0>)
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	220f      	movs	r2, #15
 80024f4:	4013      	ands	r3, r2
 80024f6:	1d3a      	adds	r2, r7, #4
 80024f8:	5cd3      	ldrb	r3, [r2, r3]
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80024fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024fe:	23c0      	movs	r3, #192	; 0xc0
 8002500:	025b      	lsls	r3, r3, #9
 8002502:	401a      	ands	r2, r3
 8002504:	2380      	movs	r3, #128	; 0x80
 8002506:	025b      	lsls	r3, r3, #9
 8002508:	429a      	cmp	r2, r3
 800250a:	d109      	bne.n	8002520 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800250c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800250e:	481c      	ldr	r0, [pc, #112]	; (8002580 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002510:	f7fd fdfa 	bl	8000108 <__udivsi3>
 8002514:	0003      	movs	r3, r0
 8002516:	001a      	movs	r2, r3
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	4353      	muls	r3, r2
 800251c:	637b      	str	r3, [r7, #52]	; 0x34
 800251e:	e01a      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002522:	23c0      	movs	r3, #192	; 0xc0
 8002524:	025b      	lsls	r3, r3, #9
 8002526:	401a      	ands	r2, r3
 8002528:	23c0      	movs	r3, #192	; 0xc0
 800252a:	025b      	lsls	r3, r3, #9
 800252c:	429a      	cmp	r2, r3
 800252e:	d109      	bne.n	8002544 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002530:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002532:	4814      	ldr	r0, [pc, #80]	; (8002584 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002534:	f7fd fde8 	bl	8000108 <__udivsi3>
 8002538:	0003      	movs	r3, r0
 800253a:	001a      	movs	r2, r3
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	4353      	muls	r3, r2
 8002540:	637b      	str	r3, [r7, #52]	; 0x34
 8002542:	e008      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002544:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002546:	480e      	ldr	r0, [pc, #56]	; (8002580 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002548:	f7fd fdde 	bl	8000108 <__udivsi3>
 800254c:	0003      	movs	r3, r0
 800254e:	001a      	movs	r2, r3
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	4353      	muls	r3, r2
 8002554:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002558:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800255a:	e005      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800255c:	4b09      	ldr	r3, [pc, #36]	; (8002584 <HAL_RCC_GetSysClockFreq+0xf8>)
 800255e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002560:	e002      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002562:	4b07      	ldr	r3, [pc, #28]	; (8002580 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002564:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002566:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800256a:	0018      	movs	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	b00f      	add	sp, #60	; 0x3c
 8002570:	bd90      	pop	{r4, r7, pc}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	08003660 	.word	0x08003660
 8002578:	08003670 	.word	0x08003670
 800257c:	40021000 	.word	0x40021000
 8002580:	007a1200 	.word	0x007a1200
 8002584:	02dc6c00 	.word	0x02dc6c00

08002588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800258c:	4b02      	ldr	r3, [pc, #8]	; (8002598 <HAL_RCC_GetHCLKFreq+0x10>)
 800258e:	681b      	ldr	r3, [r3, #0]
}
 8002590:	0018      	movs	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	20000000 	.word	0x20000000

0800259c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80025a0:	f7ff fff2 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025a4:	0001      	movs	r1, r0
 80025a6:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	0a1b      	lsrs	r3, r3, #8
 80025ac:	2207      	movs	r2, #7
 80025ae:	4013      	ands	r3, r2
 80025b0:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025b2:	5cd3      	ldrb	r3, [r2, r3]
 80025b4:	40d9      	lsrs	r1, r3
 80025b6:	000b      	movs	r3, r1
}    
 80025b8:	0018      	movs	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	40021000 	.word	0x40021000
 80025c4:	08003690 	.word	0x08003690

080025c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e044      	b.n	8002664 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d107      	bne.n	80025f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2270      	movs	r2, #112	; 0x70
 80025e6:	2100      	movs	r1, #0
 80025e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	0018      	movs	r0, r3
 80025ee:	f7fe f86f 	bl	80006d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2224      	movs	r2, #36	; 0x24
 80025f6:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2101      	movs	r1, #1
 8002604:	438a      	bics	r2, r1
 8002606:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	0018      	movs	r0, r3
 800260c:	f000 fbc8 	bl	8002da0 <UART_SetConfig>
 8002610:	0003      	movs	r3, r0
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e024      	b.n	8002664 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	0018      	movs	r0, r3
 8002626:	f000 fd41 	bl	80030ac <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	490d      	ldr	r1, [pc, #52]	; (800266c <HAL_UART_Init+0xa4>)
 8002636:	400a      	ands	r2, r1
 8002638:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	212a      	movs	r1, #42	; 0x2a
 8002646:	438a      	bics	r2, r1
 8002648:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2101      	movs	r1, #1
 8002656:	430a      	orrs	r2, r1
 8002658:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	0018      	movs	r0, r3
 800265e:	f000 fdd9 	bl	8003214 <UART_CheckIdleState>
 8002662:	0003      	movs	r3, r0
}
 8002664:	0018      	movs	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	b002      	add	sp, #8
 800266a:	bd80      	pop	{r7, pc}
 800266c:	ffffb7ff 	.word	0xffffb7ff

08002670 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08a      	sub	sp, #40	; 0x28
 8002674:	af02      	add	r7, sp, #8
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	1dbb      	adds	r3, r7, #6
 800267e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002684:	2b20      	cmp	r3, #32
 8002686:	d000      	beq.n	800268a <HAL_UART_Transmit+0x1a>
 8002688:	e095      	b.n	80027b6 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_UART_Transmit+0x28>
 8002690:	1dbb      	adds	r3, r7, #6
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e08d      	b.n	80027b8 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	015b      	lsls	r3, r3, #5
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d109      	bne.n	80026bc <HAL_UART_Transmit+0x4c>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d105      	bne.n	80026bc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2201      	movs	r2, #1
 80026b4:	4013      	ands	r3, r2
 80026b6:	d001      	beq.n	80026bc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e07d      	b.n	80027b8 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2270      	movs	r2, #112	; 0x70
 80026c0:	5c9b      	ldrb	r3, [r3, r2]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_UART_Transmit+0x5a>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e076      	b.n	80027b8 <HAL_UART_Transmit+0x148>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2270      	movs	r2, #112	; 0x70
 80026ce:	2101      	movs	r1, #1
 80026d0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2221      	movs	r2, #33	; 0x21
 80026dc:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80026de:	f7fe f921 	bl	8000924 <HAL_GetTick>
 80026e2:	0003      	movs	r3, r0
 80026e4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1dba      	adds	r2, r7, #6
 80026ea:	2150      	movs	r1, #80	; 0x50
 80026ec:	8812      	ldrh	r2, [r2, #0]
 80026ee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	1dba      	adds	r2, r7, #6
 80026f4:	2152      	movs	r1, #82	; 0x52
 80026f6:	8812      	ldrh	r2, [r2, #0]
 80026f8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	015b      	lsls	r3, r3, #5
 8002702:	429a      	cmp	r2, r3
 8002704:	d108      	bne.n	8002718 <HAL_UART_Transmit+0xa8>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d104      	bne.n	8002718 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	e003      	b.n	8002720 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800271c:	2300      	movs	r3, #0
 800271e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002720:	e02d      	b.n	800277e <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	0013      	movs	r3, r2
 800272c:	2200      	movs	r2, #0
 800272e:	2180      	movs	r1, #128	; 0x80
 8002730:	f000 fdb6 	bl	80032a0 <UART_WaitOnFlagUntilTimeout>
 8002734:	1e03      	subs	r3, r0, #0
 8002736:	d001      	beq.n	800273c <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e03d      	b.n	80027b8 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10b      	bne.n	800275a <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	881a      	ldrh	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	05d2      	lsls	r2, r2, #23
 800274c:	0dd2      	lsrs	r2, r2, #23
 800274e:	b292      	uxth	r2, r2
 8002750:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	3302      	adds	r3, #2
 8002756:	61bb      	str	r3, [r7, #24]
 8002758:	e008      	b.n	800276c <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	781a      	ldrb	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	b292      	uxth	r2, r2
 8002764:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3301      	adds	r3, #1
 800276a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2252      	movs	r2, #82	; 0x52
 8002770:	5a9b      	ldrh	r3, [r3, r2]
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b299      	uxth	r1, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2252      	movs	r2, #82	; 0x52
 800277c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2252      	movs	r2, #82	; 0x52
 8002782:	5a9b      	ldrh	r3, [r3, r2]
 8002784:	b29b      	uxth	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1cb      	bne.n	8002722 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	0013      	movs	r3, r2
 8002794:	2200      	movs	r2, #0
 8002796:	2140      	movs	r1, #64	; 0x40
 8002798:	f000 fd82 	bl	80032a0 <UART_WaitOnFlagUntilTimeout>
 800279c:	1e03      	subs	r3, r0, #0
 800279e:	d001      	beq.n	80027a4 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e009      	b.n	80027b8 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2220      	movs	r2, #32
 80027a8:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2270      	movs	r2, #112	; 0x70
 80027ae:	2100      	movs	r1, #0
 80027b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	e000      	b.n	80027b8 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80027b6:	2302      	movs	r3, #2
  }
}
 80027b8:	0018      	movs	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b008      	add	sp, #32
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08a      	sub	sp, #40	; 0x28
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	1dbb      	adds	r3, r7, #6
 80027ce:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	d000      	beq.n	80027da <HAL_UART_Receive+0x1a>
 80027d8:	e0d6      	b.n	8002988 <HAL_UART_Receive+0x1c8>
  {
    if ((pData == NULL) || (Size == 0U))
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_UART_Receive+0x28>
 80027e0:	1dbb      	adds	r3, r7, #6
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0ce      	b.n	800298a <HAL_UART_Receive+0x1ca>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	2380      	movs	r3, #128	; 0x80
 80027f2:	015b      	lsls	r3, r3, #5
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d109      	bne.n	800280c <HAL_UART_Receive+0x4c>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d105      	bne.n	800280c <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2201      	movs	r2, #1
 8002804:	4013      	ands	r3, r2
 8002806:	d001      	beq.n	800280c <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0be      	b.n	800298a <HAL_UART_Receive+0x1ca>
      }
    }

    __HAL_LOCK(huart);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2270      	movs	r2, #112	; 0x70
 8002810:	5c9b      	ldrb	r3, [r3, r2]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_UART_Receive+0x5a>
 8002816:	2302      	movs	r3, #2
 8002818:	e0b7      	b.n	800298a <HAL_UART_Receive+0x1ca>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2270      	movs	r2, #112	; 0x70
 800281e:	2101      	movs	r1, #1
 8002820:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2222      	movs	r2, #34	; 0x22
 800282c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800282e:	f7fe f879 	bl	8000924 <HAL_GetTick>
 8002832:	0003      	movs	r3, r0
 8002834:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1dba      	adds	r2, r7, #6
 800283a:	2158      	movs	r1, #88	; 0x58
 800283c:	8812      	ldrh	r2, [r2, #0]
 800283e:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1dba      	adds	r2, r7, #6
 8002844:	215a      	movs	r1, #90	; 0x5a
 8002846:	8812      	ldrh	r2, [r2, #0]
 8002848:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	2380      	movs	r3, #128	; 0x80
 8002850:	015b      	lsls	r3, r3, #5
 8002852:	429a      	cmp	r2, r3
 8002854:	d10d      	bne.n	8002872 <HAL_UART_Receive+0xb2>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d104      	bne.n	8002868 <HAL_UART_Receive+0xa8>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	225c      	movs	r2, #92	; 0x5c
 8002862:	494c      	ldr	r1, [pc, #304]	; (8002994 <HAL_UART_Receive+0x1d4>)
 8002864:	5299      	strh	r1, [r3, r2]
 8002866:	e02e      	b.n	80028c6 <HAL_UART_Receive+0x106>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	225c      	movs	r2, #92	; 0x5c
 800286c:	21ff      	movs	r1, #255	; 0xff
 800286e:	5299      	strh	r1, [r3, r2]
 8002870:	e029      	b.n	80028c6 <HAL_UART_Receive+0x106>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10d      	bne.n	8002896 <HAL_UART_Receive+0xd6>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d104      	bne.n	800288c <HAL_UART_Receive+0xcc>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	225c      	movs	r2, #92	; 0x5c
 8002886:	21ff      	movs	r1, #255	; 0xff
 8002888:	5299      	strh	r1, [r3, r2]
 800288a:	e01c      	b.n	80028c6 <HAL_UART_Receive+0x106>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	225c      	movs	r2, #92	; 0x5c
 8002890:	217f      	movs	r1, #127	; 0x7f
 8002892:	5299      	strh	r1, [r3, r2]
 8002894:	e017      	b.n	80028c6 <HAL_UART_Receive+0x106>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	2380      	movs	r3, #128	; 0x80
 800289c:	055b      	lsls	r3, r3, #21
 800289e:	429a      	cmp	r2, r3
 80028a0:	d10d      	bne.n	80028be <HAL_UART_Receive+0xfe>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d104      	bne.n	80028b4 <HAL_UART_Receive+0xf4>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	225c      	movs	r2, #92	; 0x5c
 80028ae:	217f      	movs	r1, #127	; 0x7f
 80028b0:	5299      	strh	r1, [r3, r2]
 80028b2:	e008      	b.n	80028c6 <HAL_UART_Receive+0x106>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	225c      	movs	r2, #92	; 0x5c
 80028b8:	213f      	movs	r1, #63	; 0x3f
 80028ba:	5299      	strh	r1, [r3, r2]
 80028bc:	e003      	b.n	80028c6 <HAL_UART_Receive+0x106>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	225c      	movs	r2, #92	; 0x5c
 80028c2:	2100      	movs	r1, #0
 80028c4:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80028c6:	2312      	movs	r3, #18
 80028c8:	18fb      	adds	r3, r7, r3
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	215c      	movs	r1, #92	; 0x5c
 80028ce:	5a52      	ldrh	r2, [r2, r1]
 80028d0:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	015b      	lsls	r3, r3, #5
 80028da:	429a      	cmp	r2, r3
 80028dc:	d108      	bne.n	80028f0 <HAL_UART_Receive+0x130>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d104      	bne.n	80028f0 <HAL_UART_Receive+0x130>
    {
      pdata8bits  = NULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	e003      	b.n	80028f8 <HAL_UART_Receive+0x138>
    }
    else
    {
      pdata8bits  = pData;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80028f8:	e037      	b.n	800296a <HAL_UART_Receive+0x1aa>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	0013      	movs	r3, r2
 8002904:	2200      	movs	r2, #0
 8002906:	2120      	movs	r1, #32
 8002908:	f000 fcca 	bl	80032a0 <UART_WaitOnFlagUntilTimeout>
 800290c:	1e03      	subs	r3, r0, #0
 800290e:	d001      	beq.n	8002914 <HAL_UART_Receive+0x154>
      {
        return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e03a      	b.n	800298a <HAL_UART_Receive+0x1ca>
      }
      if (pdata8bits == NULL)
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10e      	bne.n	8002938 <HAL_UART_Receive+0x178>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002920:	b29b      	uxth	r3, r3
 8002922:	2212      	movs	r2, #18
 8002924:	18ba      	adds	r2, r7, r2
 8002926:	8812      	ldrh	r2, [r2, #0]
 8002928:	4013      	ands	r3, r2
 800292a:	b29a      	uxth	r2, r3
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	3302      	adds	r3, #2
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	e00f      	b.n	8002958 <HAL_UART_Receive+0x198>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800293e:	b29b      	uxth	r3, r3
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2212      	movs	r2, #18
 8002944:	18ba      	adds	r2, r7, r2
 8002946:	8812      	ldrh	r2, [r2, #0]
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	4013      	ands	r3, r2
 800294c:	b2da      	uxtb	r2, r3
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3301      	adds	r3, #1
 8002956:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	225a      	movs	r2, #90	; 0x5a
 800295c:	5a9b      	ldrh	r3, [r3, r2]
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b01      	subs	r3, #1
 8002962:	b299      	uxth	r1, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	225a      	movs	r2, #90	; 0x5a
 8002968:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	225a      	movs	r2, #90	; 0x5a
 800296e:	5a9b      	ldrh	r3, [r3, r2]
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1c1      	bne.n	80028fa <HAL_UART_Receive+0x13a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2220      	movs	r2, #32
 800297a:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2270      	movs	r2, #112	; 0x70
 8002980:	2100      	movs	r1, #0
 8002982:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002984:	2300      	movs	r3, #0
 8002986:	e000      	b.n	800298a <HAL_UART_Receive+0x1ca>
  }
  else
  {
    return HAL_BUSY;
 8002988:	2302      	movs	r3, #2
  }
}
 800298a:	0018      	movs	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	b008      	add	sp, #32
 8002990:	bd80      	pop	{r7, pc}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	000001ff 	.word	0x000001ff

08002998 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	1dbb      	adds	r3, r7, #6
 80029a4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029aa:	2b20      	cmp	r3, #32
 80029ac:	d000      	beq.n	80029b0 <HAL_UART_Receive_IT+0x18>
 80029ae:	e09f      	b.n	8002af0 <HAL_UART_Receive_IT+0x158>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_UART_Receive_IT+0x26>
 80029b6:	1dbb      	adds	r3, r7, #6
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e097      	b.n	8002af2 <HAL_UART_Receive_IT+0x15a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	015b      	lsls	r3, r3, #5
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d109      	bne.n	80029e2 <HAL_UART_Receive_IT+0x4a>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d105      	bne.n	80029e2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2201      	movs	r2, #1
 80029da:	4013      	ands	r3, r2
 80029dc:	d001      	beq.n	80029e2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e087      	b.n	8002af2 <HAL_UART_Receive_IT+0x15a>
      }
    }

    __HAL_LOCK(huart);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2270      	movs	r2, #112	; 0x70
 80029e6:	5c9b      	ldrb	r3, [r3, r2]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_UART_Receive_IT+0x58>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e080      	b.n	8002af2 <HAL_UART_Receive_IT+0x15a>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2270      	movs	r2, #112	; 0x70
 80029f4:	2101      	movs	r1, #1
 80029f6:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1dba      	adds	r2, r7, #6
 8002a02:	2158      	movs	r1, #88	; 0x58
 8002a04:	8812      	ldrh	r2, [r2, #0]
 8002a06:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1dba      	adds	r2, r7, #6
 8002a0c:	215a      	movs	r1, #90	; 0x5a
 8002a0e:	8812      	ldrh	r2, [r2, #0]
 8002a10:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	2380      	movs	r3, #128	; 0x80
 8002a1e:	015b      	lsls	r3, r3, #5
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d10d      	bne.n	8002a40 <HAL_UART_Receive_IT+0xa8>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d104      	bne.n	8002a36 <HAL_UART_Receive_IT+0x9e>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	225c      	movs	r2, #92	; 0x5c
 8002a30:	4932      	ldr	r1, [pc, #200]	; (8002afc <HAL_UART_Receive_IT+0x164>)
 8002a32:	5299      	strh	r1, [r3, r2]
 8002a34:	e02e      	b.n	8002a94 <HAL_UART_Receive_IT+0xfc>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	225c      	movs	r2, #92	; 0x5c
 8002a3a:	21ff      	movs	r1, #255	; 0xff
 8002a3c:	5299      	strh	r1, [r3, r2]
 8002a3e:	e029      	b.n	8002a94 <HAL_UART_Receive_IT+0xfc>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10d      	bne.n	8002a64 <HAL_UART_Receive_IT+0xcc>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d104      	bne.n	8002a5a <HAL_UART_Receive_IT+0xc2>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	225c      	movs	r2, #92	; 0x5c
 8002a54:	21ff      	movs	r1, #255	; 0xff
 8002a56:	5299      	strh	r1, [r3, r2]
 8002a58:	e01c      	b.n	8002a94 <HAL_UART_Receive_IT+0xfc>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	225c      	movs	r2, #92	; 0x5c
 8002a5e:	217f      	movs	r1, #127	; 0x7f
 8002a60:	5299      	strh	r1, [r3, r2]
 8002a62:	e017      	b.n	8002a94 <HAL_UART_Receive_IT+0xfc>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	2380      	movs	r3, #128	; 0x80
 8002a6a:	055b      	lsls	r3, r3, #21
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d10d      	bne.n	8002a8c <HAL_UART_Receive_IT+0xf4>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d104      	bne.n	8002a82 <HAL_UART_Receive_IT+0xea>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	225c      	movs	r2, #92	; 0x5c
 8002a7c:	217f      	movs	r1, #127	; 0x7f
 8002a7e:	5299      	strh	r1, [r3, r2]
 8002a80:	e008      	b.n	8002a94 <HAL_UART_Receive_IT+0xfc>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	225c      	movs	r2, #92	; 0x5c
 8002a86:	213f      	movs	r1, #63	; 0x3f
 8002a88:	5299      	strh	r1, [r3, r2]
 8002a8a:	e003      	b.n	8002a94 <HAL_UART_Receive_IT+0xfc>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	225c      	movs	r2, #92	; 0x5c
 8002a90:	2100      	movs	r1, #0
 8002a92:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2222      	movs	r2, #34	; 0x22
 8002a9e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2101      	movs	r1, #1
 8002aac:	430a      	orrs	r2, r1
 8002aae:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	015b      	lsls	r3, r3, #5
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d107      	bne.n	8002acc <HAL_UART_Receive_IT+0x134>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d103      	bne.n	8002acc <HAL_UART_Receive_IT+0x134>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4a0e      	ldr	r2, [pc, #56]	; (8002b00 <HAL_UART_Receive_IT+0x168>)
 8002ac8:	661a      	str	r2, [r3, #96]	; 0x60
 8002aca:	e002      	b.n	8002ad2 <HAL_UART_Receive_IT+0x13a>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4a0d      	ldr	r2, [pc, #52]	; (8002b04 <HAL_UART_Receive_IT+0x16c>)
 8002ad0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2270      	movs	r2, #112	; 0x70
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2190      	movs	r1, #144	; 0x90
 8002ae6:	0049      	lsls	r1, r1, #1
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	e000      	b.n	8002af2 <HAL_UART_Receive_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8002af0:	2302      	movs	r3, #2
  }
}
 8002af2:	0018      	movs	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	b004      	add	sp, #16
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	000001ff 	.word	0x000001ff
 8002b00:	080034fd 	.word	0x080034fd
 8002b04:	08003441 	.word	0x08003441

08002b08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	4a93      	ldr	r2, [pc, #588]	; (8002d78 <HAL_UART_IRQHandler+0x270>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d112      	bne.n	8002b5c <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d00e      	beq.n	8002b5c <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	2220      	movs	r2, #32
 8002b42:	4013      	ands	r3, r2
 8002b44:	d00a      	beq.n	8002b5c <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d100      	bne.n	8002b50 <HAL_UART_IRQHandler+0x48>
 8002b4e:	e10b      	b.n	8002d68 <HAL_UART_IRQHandler+0x260>
      {
        huart->RxISR(huart);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	0010      	movs	r0, r2
 8002b58:	4798      	blx	r3
      }
      return;
 8002b5a:	e105      	b.n	8002d68 <HAL_UART_IRQHandler+0x260>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d100      	bne.n	8002b64 <HAL_UART_IRQHandler+0x5c>
 8002b62:	e0cd      	b.n	8002d00 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2201      	movs	r2, #1
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d105      	bne.n	8002b78 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	2390      	movs	r3, #144	; 0x90
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4013      	ands	r3, r2
 8002b74:	d100      	bne.n	8002b78 <HAL_UART_IRQHandler+0x70>
 8002b76:	e0c3      	b.n	8002d00 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d00e      	beq.n	8002b9e <HAL_UART_IRQHandler+0x96>
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	4013      	ands	r3, r2
 8002b88:	d009      	beq.n	8002b9e <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b96:	2201      	movs	r2, #1
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d00d      	beq.n	8002bc2 <HAL_UART_IRQHandler+0xba>
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	4013      	ands	r3, r2
 8002bac:	d009      	beq.n	8002bc2 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bba:	2204      	movs	r2, #4
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	2204      	movs	r2, #4
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d00d      	beq.n	8002be6 <HAL_UART_IRQHandler+0xde>
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d009      	beq.n	8002be6 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2204      	movs	r2, #4
 8002bd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bde:	2202      	movs	r2, #2
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	2208      	movs	r2, #8
 8002bea:	4013      	ands	r3, r2
 8002bec:	d011      	beq.n	8002c12 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d103      	bne.n	8002bfe <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002bfc:	d009      	beq.n	8002c12 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2208      	movs	r2, #8
 8002c04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c0a:	2208      	movs	r2, #8
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c12:	69fa      	ldr	r2, [r7, #28]
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d00f      	beq.n	8002c3c <HAL_UART_IRQHandler+0x134>
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	2380      	movs	r3, #128	; 0x80
 8002c20:	04db      	lsls	r3, r3, #19
 8002c22:	4013      	ands	r3, r2
 8002c24:	d00a      	beq.n	8002c3c <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2280      	movs	r2, #128	; 0x80
 8002c2c:	0112      	lsls	r2, r2, #4
 8002c2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c34:	2220      	movs	r2, #32
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d100      	bne.n	8002c46 <HAL_UART_IRQHandler+0x13e>
 8002c44:	e092      	b.n	8002d6c <HAL_UART_IRQHandler+0x264>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d00c      	beq.n	8002c68 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	2220      	movs	r2, #32
 8002c52:	4013      	ands	r3, r2
 8002c54:	d008      	beq.n	8002c68 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d004      	beq.n	8002c68 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	0010      	movs	r0, r2
 8002c66:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c6c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2240      	movs	r2, #64	; 0x40
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b40      	cmp	r3, #64	; 0x40
 8002c7a:	d003      	beq.n	8002c84 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2228      	movs	r2, #40	; 0x28
 8002c80:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c82:	d033      	beq.n	8002cec <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	0018      	movs	r0, r3
 8002c88:	f000 fb88 	bl	800339c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2240      	movs	r2, #64	; 0x40
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b40      	cmp	r3, #64	; 0x40
 8002c98:	d123      	bne.n	8002ce2 <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2140      	movs	r1, #64	; 0x40
 8002ca6:	438a      	bics	r2, r1
 8002ca8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d012      	beq.n	8002cd8 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cb6:	4a31      	ldr	r2, [pc, #196]	; (8002d7c <HAL_UART_IRQHandler+0x274>)
 8002cb8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	f7fe fd9e 	bl	8001800 <HAL_DMA_Abort_IT>
 8002cc4:	1e03      	subs	r3, r0, #0
 8002cc6:	d019      	beq.n	8002cfc <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd6:	e011      	b.n	8002cfc <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f000 f858 	bl	8002d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce0:	e00c      	b.n	8002cfc <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f000 f853 	bl	8002d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cea:	e007      	b.n	8002cfc <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f000 f84e 	bl	8002d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002cfa:	e037      	b.n	8002d6c <HAL_UART_IRQHandler+0x264>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cfc:	46c0      	nop			; (mov r8, r8)
    return;
 8002cfe:	e035      	b.n	8002d6c <HAL_UART_IRQHandler+0x264>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d00:	69fa      	ldr	r2, [r7, #28]
 8002d02:	2380      	movs	r3, #128	; 0x80
 8002d04:	035b      	lsls	r3, r3, #13
 8002d06:	4013      	ands	r3, r2
 8002d08:	d00e      	beq.n	8002d28 <HAL_UART_IRQHandler+0x220>
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	03db      	lsls	r3, r3, #15
 8002d10:	4013      	ands	r3, r2
 8002d12:	d009      	beq.n	8002d28 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2280      	movs	r2, #128	; 0x80
 8002d1a:	0352      	lsls	r2, r2, #13
 8002d1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	0018      	movs	r0, r3
 8002d22:	f000 fc49 	bl	80035b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d26:	e024      	b.n	8002d72 <HAL_UART_IRQHandler+0x26a>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	2280      	movs	r2, #128	; 0x80
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d00d      	beq.n	8002d4c <HAL_UART_IRQHandler+0x244>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	2280      	movs	r2, #128	; 0x80
 8002d34:	4013      	ands	r3, r2
 8002d36:	d009      	beq.n	8002d4c <HAL_UART_IRQHandler+0x244>
  {
    if (huart->TxISR != NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d017      	beq.n	8002d70 <HAL_UART_IRQHandler+0x268>
    {
      huart->TxISR(huart);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	0010      	movs	r0, r2
 8002d48:	4798      	blx	r3
    }
    return;
 8002d4a:	e011      	b.n	8002d70 <HAL_UART_IRQHandler+0x268>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	2240      	movs	r2, #64	; 0x40
 8002d50:	4013      	ands	r3, r2
 8002d52:	d00e      	beq.n	8002d72 <HAL_UART_IRQHandler+0x26a>
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	2240      	movs	r2, #64	; 0x40
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d00a      	beq.n	8002d72 <HAL_UART_IRQHandler+0x26a>
  {
    UART_EndTransmit_IT(huart);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f000 fb53 	bl	800340a <UART_EndTransmit_IT>
    return;
 8002d64:	46c0      	nop			; (mov r8, r8)
 8002d66:	e004      	b.n	8002d72 <HAL_UART_IRQHandler+0x26a>
      return;
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	e002      	b.n	8002d72 <HAL_UART_IRQHandler+0x26a>
    return;
 8002d6c:	46c0      	nop			; (mov r8, r8)
 8002d6e:	e000      	b.n	8002d72 <HAL_UART_IRQHandler+0x26a>
    return;
 8002d70:	46c0      	nop			; (mov r8, r8)
  }

}
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b008      	add	sp, #32
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	0000080f 	.word	0x0000080f
 8002d7c:	080033dd 	.word	0x080033dd

08002d80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d88:	46c0      	nop			; (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b002      	add	sp, #8
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d98:	46c0      	nop			; (mov r8, r8)
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	b002      	add	sp, #8
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dac:	2317      	movs	r3, #23
 8002dae:	18fb      	adds	r3, r7, r3
 8002db0:	2200      	movs	r2, #0
 8002db2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4aad      	ldr	r2, [pc, #692]	; (8003088 <UART_SetConfig+0x2e8>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	0019      	movs	r1, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	4aa8      	ldr	r2, [pc, #672]	; (800308c <UART_SetConfig+0x2ec>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	0019      	movs	r1, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	4a9f      	ldr	r2, [pc, #636]	; (8003090 <UART_SetConfig+0x2f0>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	0019      	movs	r1, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a9b      	ldr	r2, [pc, #620]	; (8003094 <UART_SetConfig+0x2f4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d125      	bne.n	8002e76 <UART_SetConfig+0xd6>
 8002e2a:	4b9b      	ldr	r3, [pc, #620]	; (8003098 <UART_SetConfig+0x2f8>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	2203      	movs	r2, #3
 8002e30:	4013      	ands	r3, r2
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d00f      	beq.n	8002e56 <UART_SetConfig+0xb6>
 8002e36:	d304      	bcc.n	8002e42 <UART_SetConfig+0xa2>
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d011      	beq.n	8002e60 <UART_SetConfig+0xc0>
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d005      	beq.n	8002e4c <UART_SetConfig+0xac>
 8002e40:	e013      	b.n	8002e6a <UART_SetConfig+0xca>
 8002e42:	231f      	movs	r3, #31
 8002e44:	18fb      	adds	r3, r7, r3
 8002e46:	2200      	movs	r2, #0
 8002e48:	701a      	strb	r2, [r3, #0]
 8002e4a:	e022      	b.n	8002e92 <UART_SetConfig+0xf2>
 8002e4c:	231f      	movs	r3, #31
 8002e4e:	18fb      	adds	r3, r7, r3
 8002e50:	2202      	movs	r2, #2
 8002e52:	701a      	strb	r2, [r3, #0]
 8002e54:	e01d      	b.n	8002e92 <UART_SetConfig+0xf2>
 8002e56:	231f      	movs	r3, #31
 8002e58:	18fb      	adds	r3, r7, r3
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	701a      	strb	r2, [r3, #0]
 8002e5e:	e018      	b.n	8002e92 <UART_SetConfig+0xf2>
 8002e60:	231f      	movs	r3, #31
 8002e62:	18fb      	adds	r3, r7, r3
 8002e64:	2208      	movs	r2, #8
 8002e66:	701a      	strb	r2, [r3, #0]
 8002e68:	e013      	b.n	8002e92 <UART_SetConfig+0xf2>
 8002e6a:	231f      	movs	r3, #31
 8002e6c:	18fb      	adds	r3, r7, r3
 8002e6e:	2210      	movs	r2, #16
 8002e70:	701a      	strb	r2, [r3, #0]
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	e00d      	b.n	8002e92 <UART_SetConfig+0xf2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a88      	ldr	r2, [pc, #544]	; (800309c <UART_SetConfig+0x2fc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d104      	bne.n	8002e8a <UART_SetConfig+0xea>
 8002e80:	231f      	movs	r3, #31
 8002e82:	18fb      	adds	r3, r7, r3
 8002e84:	2200      	movs	r2, #0
 8002e86:	701a      	strb	r2, [r3, #0]
 8002e88:	e003      	b.n	8002e92 <UART_SetConfig+0xf2>
 8002e8a:	231f      	movs	r3, #31
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	2210      	movs	r2, #16
 8002e90:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69da      	ldr	r2, [r3, #28]
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	021b      	lsls	r3, r3, #8
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d000      	beq.n	8002ea0 <UART_SetConfig+0x100>
 8002e9e:	e07d      	b.n	8002f9c <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8002ea0:	231f      	movs	r3, #31
 8002ea2:	18fb      	adds	r3, r7, r3
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d01c      	beq.n	8002ee4 <UART_SetConfig+0x144>
 8002eaa:	dc02      	bgt.n	8002eb2 <UART_SetConfig+0x112>
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <UART_SetConfig+0x11c>
 8002eb0:	e04b      	b.n	8002f4a <UART_SetConfig+0x1aa>
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d025      	beq.n	8002f02 <UART_SetConfig+0x162>
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d037      	beq.n	8002f2a <UART_SetConfig+0x18a>
 8002eba:	e046      	b.n	8002f4a <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ebc:	f7ff fb6e 	bl	800259c <HAL_RCC_GetPCLK1Freq>
 8002ec0:	0003      	movs	r3, r0
 8002ec2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	005a      	lsls	r2, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	085b      	lsrs	r3, r3, #1
 8002ece:	18d2      	adds	r2, r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	0010      	movs	r0, r2
 8002ed8:	f7fd f916 	bl	8000108 <__udivsi3>
 8002edc:	0003      	movs	r3, r0
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	61bb      	str	r3, [r7, #24]
        break;
 8002ee2:	e037      	b.n	8002f54 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	085b      	lsrs	r3, r3, #1
 8002eea:	4a6d      	ldr	r2, [pc, #436]	; (80030a0 <UART_SetConfig+0x300>)
 8002eec:	189a      	adds	r2, r3, r2
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	0019      	movs	r1, r3
 8002ef4:	0010      	movs	r0, r2
 8002ef6:	f7fd f907 	bl	8000108 <__udivsi3>
 8002efa:	0003      	movs	r3, r0
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	61bb      	str	r3, [r7, #24]
        break;
 8002f00:	e028      	b.n	8002f54 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f02:	f7ff fac3 	bl	800248c <HAL_RCC_GetSysClockFreq>
 8002f06:	0003      	movs	r3, r0
 8002f08:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	005a      	lsls	r2, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	085b      	lsrs	r3, r3, #1
 8002f14:	18d2      	adds	r2, r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	0010      	movs	r0, r2
 8002f1e:	f7fd f8f3 	bl	8000108 <__udivsi3>
 8002f22:	0003      	movs	r3, r0
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	61bb      	str	r3, [r7, #24]
        break;
 8002f28:	e014      	b.n	8002f54 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	085b      	lsrs	r3, r3, #1
 8002f30:	2280      	movs	r2, #128	; 0x80
 8002f32:	0252      	lsls	r2, r2, #9
 8002f34:	189a      	adds	r2, r3, r2
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	0019      	movs	r1, r3
 8002f3c:	0010      	movs	r0, r2
 8002f3e:	f7fd f8e3 	bl	8000108 <__udivsi3>
 8002f42:	0003      	movs	r3, r0
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	61bb      	str	r3, [r7, #24]
        break;
 8002f48:	e004      	b.n	8002f54 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8002f4a:	2317      	movs	r3, #23
 8002f4c:	18fb      	adds	r3, r7, r3
 8002f4e:	2201      	movs	r2, #1
 8002f50:	701a      	strb	r2, [r3, #0]
        break;
 8002f52:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	2b0f      	cmp	r3, #15
 8002f58:	d91b      	bls.n	8002f92 <UART_SetConfig+0x1f2>
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	4a51      	ldr	r2, [pc, #324]	; (80030a4 <UART_SetConfig+0x304>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d817      	bhi.n	8002f92 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	200a      	movs	r0, #10
 8002f68:	183b      	adds	r3, r7, r0
 8002f6a:	210f      	movs	r1, #15
 8002f6c:	438a      	bics	r2, r1
 8002f6e:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	085b      	lsrs	r3, r3, #1
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2207      	movs	r2, #7
 8002f78:	4013      	ands	r3, r2
 8002f7a:	b299      	uxth	r1, r3
 8002f7c:	183b      	adds	r3, r7, r0
 8002f7e:	183a      	adds	r2, r7, r0
 8002f80:	8812      	ldrh	r2, [r2, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	183a      	adds	r2, r7, r0
 8002f8c:	8812      	ldrh	r2, [r2, #0]
 8002f8e:	60da      	str	r2, [r3, #12]
 8002f90:	e06c      	b.n	800306c <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8002f92:	2317      	movs	r3, #23
 8002f94:	18fb      	adds	r3, r7, r3
 8002f96:	2201      	movs	r2, #1
 8002f98:	701a      	strb	r2, [r3, #0]
 8002f9a:	e067      	b.n	800306c <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8002f9c:	231f      	movs	r3, #31
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d01b      	beq.n	8002fde <UART_SetConfig+0x23e>
 8002fa6:	dc02      	bgt.n	8002fae <UART_SetConfig+0x20e>
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <UART_SetConfig+0x218>
 8002fac:	e049      	b.n	8003042 <UART_SetConfig+0x2a2>
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d024      	beq.n	8002ffc <UART_SetConfig+0x25c>
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d035      	beq.n	8003022 <UART_SetConfig+0x282>
 8002fb6:	e044      	b.n	8003042 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fb8:	f7ff faf0 	bl	800259c <HAL_RCC_GetPCLK1Freq>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	085a      	lsrs	r2, r3, #1
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	18d2      	adds	r2, r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	0019      	movs	r1, r3
 8002fd0:	0010      	movs	r0, r2
 8002fd2:	f7fd f899 	bl	8000108 <__udivsi3>
 8002fd6:	0003      	movs	r3, r0
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	61bb      	str	r3, [r7, #24]
        break;
 8002fdc:	e036      	b.n	800304c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	085b      	lsrs	r3, r3, #1
 8002fe4:	4a30      	ldr	r2, [pc, #192]	; (80030a8 <UART_SetConfig+0x308>)
 8002fe6:	189a      	adds	r2, r3, r2
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	0019      	movs	r1, r3
 8002fee:	0010      	movs	r0, r2
 8002ff0:	f7fd f88a 	bl	8000108 <__udivsi3>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	61bb      	str	r3, [r7, #24]
        break;
 8002ffa:	e027      	b.n	800304c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ffc:	f7ff fa46 	bl	800248c <HAL_RCC_GetSysClockFreq>
 8003000:	0003      	movs	r3, r0
 8003002:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	085a      	lsrs	r2, r3, #1
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	18d2      	adds	r2, r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	0019      	movs	r1, r3
 8003014:	0010      	movs	r0, r2
 8003016:	f7fd f877 	bl	8000108 <__udivsi3>
 800301a:	0003      	movs	r3, r0
 800301c:	b29b      	uxth	r3, r3
 800301e:	61bb      	str	r3, [r7, #24]
        break;
 8003020:	e014      	b.n	800304c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	085b      	lsrs	r3, r3, #1
 8003028:	2280      	movs	r2, #128	; 0x80
 800302a:	0212      	lsls	r2, r2, #8
 800302c:	189a      	adds	r2, r3, r2
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	0019      	movs	r1, r3
 8003034:	0010      	movs	r0, r2
 8003036:	f7fd f867 	bl	8000108 <__udivsi3>
 800303a:	0003      	movs	r3, r0
 800303c:	b29b      	uxth	r3, r3
 800303e:	61bb      	str	r3, [r7, #24]
        break;
 8003040:	e004      	b.n	800304c <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8003042:	2317      	movs	r3, #23
 8003044:	18fb      	adds	r3, r7, r3
 8003046:	2201      	movs	r2, #1
 8003048:	701a      	strb	r2, [r3, #0]
        break;
 800304a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	2b0f      	cmp	r3, #15
 8003050:	d908      	bls.n	8003064 <UART_SetConfig+0x2c4>
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	4a13      	ldr	r2, [pc, #76]	; (80030a4 <UART_SetConfig+0x304>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d804      	bhi.n	8003064 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	60da      	str	r2, [r3, #12]
 8003062:	e003      	b.n	800306c <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003064:	2317      	movs	r3, #23
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	2201      	movs	r2, #1
 800306a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003078:	2317      	movs	r3, #23
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	781b      	ldrb	r3, [r3, #0]
}
 800307e:	0018      	movs	r0, r3
 8003080:	46bd      	mov	sp, r7
 8003082:	b008      	add	sp, #32
 8003084:	bd80      	pop	{r7, pc}
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	efff69f3 	.word	0xefff69f3
 800308c:	ffffcfff 	.word	0xffffcfff
 8003090:	fffff4ff 	.word	0xfffff4ff
 8003094:	40013800 	.word	0x40013800
 8003098:	40021000 	.word	0x40021000
 800309c:	40004400 	.word	0x40004400
 80030a0:	00f42400 	.word	0x00f42400
 80030a4:	0000ffff 	.word	0x0000ffff
 80030a8:	007a1200 	.word	0x007a1200

080030ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	2201      	movs	r2, #1
 80030ba:	4013      	ands	r3, r2
 80030bc:	d00b      	beq.n	80030d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4a4a      	ldr	r2, [pc, #296]	; (80031f0 <UART_AdvFeatureConfig+0x144>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	0019      	movs	r1, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	2202      	movs	r2, #2
 80030dc:	4013      	ands	r3, r2
 80030de:	d00b      	beq.n	80030f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	4a43      	ldr	r2, [pc, #268]	; (80031f4 <UART_AdvFeatureConfig+0x148>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	0019      	movs	r1, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	2204      	movs	r2, #4
 80030fe:	4013      	ands	r3, r2
 8003100:	d00b      	beq.n	800311a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	4a3b      	ldr	r2, [pc, #236]	; (80031f8 <UART_AdvFeatureConfig+0x14c>)
 800310a:	4013      	ands	r3, r2
 800310c:	0019      	movs	r1, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	2208      	movs	r2, #8
 8003120:	4013      	ands	r3, r2
 8003122:	d00b      	beq.n	800313c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	4a34      	ldr	r2, [pc, #208]	; (80031fc <UART_AdvFeatureConfig+0x150>)
 800312c:	4013      	ands	r3, r2
 800312e:	0019      	movs	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	2210      	movs	r2, #16
 8003142:	4013      	ands	r3, r2
 8003144:	d00b      	beq.n	800315e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	4a2c      	ldr	r2, [pc, #176]	; (8003200 <UART_AdvFeatureConfig+0x154>)
 800314e:	4013      	ands	r3, r2
 8003150:	0019      	movs	r1, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	2220      	movs	r2, #32
 8003164:	4013      	ands	r3, r2
 8003166:	d00b      	beq.n	8003180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	4a25      	ldr	r2, [pc, #148]	; (8003204 <UART_AdvFeatureConfig+0x158>)
 8003170:	4013      	ands	r3, r2
 8003172:	0019      	movs	r1, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	2240      	movs	r2, #64	; 0x40
 8003186:	4013      	ands	r3, r2
 8003188:	d01d      	beq.n	80031c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	4a1d      	ldr	r2, [pc, #116]	; (8003208 <UART_AdvFeatureConfig+0x15c>)
 8003192:	4013      	ands	r3, r2
 8003194:	0019      	movs	r1, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031a6:	2380      	movs	r3, #128	; 0x80
 80031a8:	035b      	lsls	r3, r3, #13
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d10b      	bne.n	80031c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	4a15      	ldr	r2, [pc, #84]	; (800320c <UART_AdvFeatureConfig+0x160>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	0019      	movs	r1, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	2280      	movs	r2, #128	; 0x80
 80031cc:	4013      	ands	r3, r2
 80031ce:	d00b      	beq.n	80031e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	4a0e      	ldr	r2, [pc, #56]	; (8003210 <UART_AdvFeatureConfig+0x164>)
 80031d8:	4013      	ands	r3, r2
 80031da:	0019      	movs	r1, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	605a      	str	r2, [r3, #4]
  }
}
 80031e8:	46c0      	nop			; (mov r8, r8)
 80031ea:	46bd      	mov	sp, r7
 80031ec:	b002      	add	sp, #8
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	fffdffff 	.word	0xfffdffff
 80031f4:	fffeffff 	.word	0xfffeffff
 80031f8:	fffbffff 	.word	0xfffbffff
 80031fc:	ffff7fff 	.word	0xffff7fff
 8003200:	ffffefff 	.word	0xffffefff
 8003204:	ffffdfff 	.word	0xffffdfff
 8003208:	ffefffff 	.word	0xffefffff
 800320c:	ff9fffff 	.word	0xff9fffff
 8003210:	fff7ffff 	.word	0xfff7ffff

08003214 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af02      	add	r7, sp, #8
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003222:	f7fd fb7f 	bl	8000924 <HAL_GetTick>
 8003226:	0003      	movs	r3, r0
 8003228:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2208      	movs	r2, #8
 8003232:	4013      	ands	r3, r2
 8003234:	2b08      	cmp	r3, #8
 8003236:	d10d      	bne.n	8003254 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	0399      	lsls	r1, r3, #14
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	4b16      	ldr	r3, [pc, #88]	; (800329c <UART_CheckIdleState+0x88>)
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	0013      	movs	r3, r2
 8003246:	2200      	movs	r2, #0
 8003248:	f000 f82a 	bl	80032a0 <UART_WaitOnFlagUntilTimeout>
 800324c:	1e03      	subs	r3, r0, #0
 800324e:	d001      	beq.n	8003254 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e01f      	b.n	8003294 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2204      	movs	r2, #4
 800325c:	4013      	ands	r3, r2
 800325e:	2b04      	cmp	r3, #4
 8003260:	d10d      	bne.n	800327e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	2380      	movs	r3, #128	; 0x80
 8003266:	03d9      	lsls	r1, r3, #15
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	4b0c      	ldr	r3, [pc, #48]	; (800329c <UART_CheckIdleState+0x88>)
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	0013      	movs	r3, r2
 8003270:	2200      	movs	r2, #0
 8003272:	f000 f815 	bl	80032a0 <UART_WaitOnFlagUntilTimeout>
 8003276:	1e03      	subs	r3, r0, #0
 8003278:	d001      	beq.n	800327e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e00a      	b.n	8003294 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2220      	movs	r2, #32
 8003282:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2220      	movs	r2, #32
 8003288:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2270      	movs	r2, #112	; 0x70
 800328e:	2100      	movs	r1, #0
 8003290:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	0018      	movs	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	b004      	add	sp, #16
 800329a:	bd80      	pop	{r7, pc}
 800329c:	01ffffff 	.word	0x01ffffff

080032a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	1dfb      	adds	r3, r7, #7
 80032ae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b0:	e05d      	b.n	800336e <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	3301      	adds	r3, #1
 80032b6:	d05a      	beq.n	800336e <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b8:	f7fd fb34 	bl	8000924 <HAL_GetTick>
 80032bc:	0002      	movs	r2, r0
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d302      	bcc.n	80032ce <UART_WaitOnFlagUntilTimeout+0x2e>
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d11b      	bne.n	8003306 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	492f      	ldr	r1, [pc, #188]	; (8003398 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80032da:	400a      	ands	r2, r1
 80032dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2101      	movs	r1, #1
 80032ea:	438a      	bics	r2, r1
 80032ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2220      	movs	r2, #32
 80032f2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2220      	movs	r2, #32
 80032f8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2270      	movs	r2, #112	; 0x70
 80032fe:	2100      	movs	r1, #0
 8003300:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e043      	b.n	800338e <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2204      	movs	r2, #4
 800330e:	4013      	ands	r3, r2
 8003310:	d02d      	beq.n	800336e <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	69da      	ldr	r2, [r3, #28]
 8003318:	2380      	movs	r3, #128	; 0x80
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	401a      	ands	r2, r3
 800331e:	2380      	movs	r3, #128	; 0x80
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	429a      	cmp	r2, r3
 8003324:	d123      	bne.n	800336e <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2280      	movs	r2, #128	; 0x80
 800332c:	0112      	lsls	r2, r2, #4
 800332e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4917      	ldr	r1, [pc, #92]	; (8003398 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800333c:	400a      	ands	r2, r1
 800333e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2101      	movs	r1, #1
 800334c:	438a      	bics	r2, r1
 800334e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2220      	movs	r2, #32
 8003354:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2220      	movs	r2, #32
 800335a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2220      	movs	r2, #32
 8003360:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2270      	movs	r2, #112	; 0x70
 8003366:	2100      	movs	r1, #0
 8003368:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e00f      	b.n	800338e <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	4013      	ands	r3, r2
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	425a      	negs	r2, r3
 800337e:	4153      	adcs	r3, r2
 8003380:	b2db      	uxtb	r3, r3
 8003382:	001a      	movs	r2, r3
 8003384:	1dfb      	adds	r3, r7, #7
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d092      	beq.n	80032b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	0018      	movs	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	b004      	add	sp, #16
 8003394:	bd80      	pop	{r7, pc}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	fffffe5f 	.word	0xfffffe5f

0800339c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	490a      	ldr	r1, [pc, #40]	; (80033d8 <UART_EndRxTransfer+0x3c>)
 80033b0:	400a      	ands	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2101      	movs	r1, #1
 80033c0:	438a      	bics	r2, r1
 80033c2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	661a      	str	r2, [r3, #96]	; 0x60
}
 80033d0:	46c0      	nop			; (mov r8, r8)
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b002      	add	sp, #8
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	fffffedf 	.word	0xfffffedf

080033dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	225a      	movs	r2, #90	; 0x5a
 80033ee:	2100      	movs	r1, #0
 80033f0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2252      	movs	r2, #82	; 0x52
 80033f6:	2100      	movs	r1, #0
 80033f8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	0018      	movs	r0, r3
 80033fe:	f7ff fcc7 	bl	8002d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	46bd      	mov	sp, r7
 8003406:	b004      	add	sp, #16
 8003408:	bd80      	pop	{r7, pc}

0800340a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b082      	sub	sp, #8
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2140      	movs	r1, #64	; 0x40
 800341e:	438a      	bics	r2, r1
 8003420:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2220      	movs	r2, #32
 8003426:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	0018      	movs	r0, r3
 8003432:	f7ff fca5 	bl	8002d80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	46bd      	mov	sp, r7
 800343a:	b002      	add	sp, #8
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003448:	230e      	movs	r3, #14
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	215c      	movs	r1, #92	; 0x5c
 8003450:	5a52      	ldrh	r2, [r2, r1]
 8003452:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003458:	2b22      	cmp	r3, #34	; 0x22
 800345a:	d140      	bne.n	80034de <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	210c      	movs	r1, #12
 8003462:	187b      	adds	r3, r7, r1
 8003464:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003466:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003468:	187b      	adds	r3, r7, r1
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	b2da      	uxtb	r2, r3
 800346e:	230e      	movs	r3, #14
 8003470:	18fb      	adds	r3, r7, r3
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	b2d9      	uxtb	r1, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347a:	400a      	ands	r2, r1
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	225a      	movs	r2, #90	; 0x5a
 800348e:	5a9b      	ldrh	r3, [r3, r2]
 8003490:	b29b      	uxth	r3, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	b299      	uxth	r1, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	225a      	movs	r2, #90	; 0x5a
 800349a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	225a      	movs	r2, #90	; 0x5a
 80034a0:	5a9b      	ldrh	r3, [r3, r2]
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d122      	bne.n	80034ee <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4911      	ldr	r1, [pc, #68]	; (80034f8 <UART_RxISR_8BIT+0xb8>)
 80034b4:	400a      	ands	r2, r1
 80034b6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2101      	movs	r1, #1
 80034c4:	438a      	bics	r2, r1
 80034c6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	0018      	movs	r0, r3
 80034d8:	f7fd f854 	bl	8000584 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80034dc:	e007      	b.n	80034ee <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699a      	ldr	r2, [r3, #24]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2108      	movs	r1, #8
 80034ea:	430a      	orrs	r2, r1
 80034ec:	619a      	str	r2, [r3, #24]
}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b004      	add	sp, #16
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	fffffedf 	.word	0xfffffedf

080034fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003504:	230e      	movs	r3, #14
 8003506:	18fb      	adds	r3, r7, r3
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	215c      	movs	r1, #92	; 0x5c
 800350c:	5a52      	ldrh	r2, [r2, r1]
 800350e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003514:	2b22      	cmp	r3, #34	; 0x22
 8003516:	d140      	bne.n	800359a <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	210c      	movs	r1, #12
 800351e:	187b      	adds	r3, r7, r1
 8003520:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003522:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003528:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800352a:	187b      	adds	r3, r7, r1
 800352c:	220e      	movs	r2, #14
 800352e:	18ba      	adds	r2, r7, r2
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	8812      	ldrh	r2, [r2, #0]
 8003534:	4013      	ands	r3, r2
 8003536:	b29a      	uxth	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003540:	1c9a      	adds	r2, r3, #2
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	225a      	movs	r2, #90	; 0x5a
 800354a:	5a9b      	ldrh	r3, [r3, r2]
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	b299      	uxth	r1, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	225a      	movs	r2, #90	; 0x5a
 8003556:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	225a      	movs	r2, #90	; 0x5a
 800355c:	5a9b      	ldrh	r3, [r3, r2]
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d122      	bne.n	80035aa <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4911      	ldr	r1, [pc, #68]	; (80035b4 <UART_RxISR_16BIT+0xb8>)
 8003570:	400a      	ands	r2, r1
 8003572:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2101      	movs	r1, #1
 8003580:	438a      	bics	r2, r1
 8003582:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	0018      	movs	r0, r3
 8003594:	f7fc fff6 	bl	8000584 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003598:	e007      	b.n	80035aa <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699a      	ldr	r2, [r3, #24]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2108      	movs	r1, #8
 80035a6:	430a      	orrs	r2, r1
 80035a8:	619a      	str	r2, [r3, #24]
}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	46bd      	mov	sp, r7
 80035ae:	b004      	add	sp, #16
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	fffffedf 	.word	0xfffffedf

080035b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80035c0:	46c0      	nop			; (mov r8, r8)
 80035c2:	46bd      	mov	sp, r7
 80035c4:	b002      	add	sp, #8
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <__libc_init_array>:
 80035c8:	b570      	push	{r4, r5, r6, lr}
 80035ca:	2600      	movs	r6, #0
 80035cc:	4d0c      	ldr	r5, [pc, #48]	; (8003600 <__libc_init_array+0x38>)
 80035ce:	4c0d      	ldr	r4, [pc, #52]	; (8003604 <__libc_init_array+0x3c>)
 80035d0:	1b64      	subs	r4, r4, r5
 80035d2:	10a4      	asrs	r4, r4, #2
 80035d4:	42a6      	cmp	r6, r4
 80035d6:	d109      	bne.n	80035ec <__libc_init_array+0x24>
 80035d8:	2600      	movs	r6, #0
 80035da:	f000 f821 	bl	8003620 <_init>
 80035de:	4d0a      	ldr	r5, [pc, #40]	; (8003608 <__libc_init_array+0x40>)
 80035e0:	4c0a      	ldr	r4, [pc, #40]	; (800360c <__libc_init_array+0x44>)
 80035e2:	1b64      	subs	r4, r4, r5
 80035e4:	10a4      	asrs	r4, r4, #2
 80035e6:	42a6      	cmp	r6, r4
 80035e8:	d105      	bne.n	80035f6 <__libc_init_array+0x2e>
 80035ea:	bd70      	pop	{r4, r5, r6, pc}
 80035ec:	00b3      	lsls	r3, r6, #2
 80035ee:	58eb      	ldr	r3, [r5, r3]
 80035f0:	4798      	blx	r3
 80035f2:	3601      	adds	r6, #1
 80035f4:	e7ee      	b.n	80035d4 <__libc_init_array+0xc>
 80035f6:	00b3      	lsls	r3, r6, #2
 80035f8:	58eb      	ldr	r3, [r5, r3]
 80035fa:	4798      	blx	r3
 80035fc:	3601      	adds	r6, #1
 80035fe:	e7f2      	b.n	80035e6 <__libc_init_array+0x1e>
 8003600:	08003698 	.word	0x08003698
 8003604:	08003698 	.word	0x08003698
 8003608:	08003698 	.word	0x08003698
 800360c:	0800369c 	.word	0x0800369c

08003610 <memset>:
 8003610:	0003      	movs	r3, r0
 8003612:	1812      	adds	r2, r2, r0
 8003614:	4293      	cmp	r3, r2
 8003616:	d100      	bne.n	800361a <memset+0xa>
 8003618:	4770      	bx	lr
 800361a:	7019      	strb	r1, [r3, #0]
 800361c:	3301      	adds	r3, #1
 800361e:	e7f9      	b.n	8003614 <memset+0x4>

08003620 <_init>:
 8003620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003626:	bc08      	pop	{r3}
 8003628:	469e      	mov	lr, r3
 800362a:	4770      	bx	lr

0800362c <_fini>:
 800362c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003632:	bc08      	pop	{r3}
 8003634:	469e      	mov	lr, r3
 8003636:	4770      	bx	lr
